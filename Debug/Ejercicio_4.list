
Ejercicio_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c08  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08003d14  08003d14  00004d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003da4  08003da4  0000506c  2**0
                  CONTENTS
  4 .ARM          00000000  08003da4  08003da4  0000506c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003da4  08003da4  0000506c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003da4  08003da4  00004da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003da8  08003da8  00004da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08003dac  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  2000006c  08003e18  0000506c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08003e18  00005280  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000506c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cbf5  00000000  00000000  00005095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021c4  00000000  00000000  00011c8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d00  00000000  00000000  00013e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a17  00000000  00000000  00014b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c59  00000000  00000000  00015567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f792  00000000  00000000  0002e1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c287  00000000  00000000  0003d952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c9bd9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cc8  00000000  00000000  000c9c1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000cd8e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003cfc 	.word	0x08003cfc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	08003cfc 	.word	0x08003cfc

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b33      	ldr	r3, [pc, #204]	@ (8000230 <MX_GPIO_Init+0xe4>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a32      	ldr	r2, [pc, #200]	@ (8000230 <MX_GPIO_Init+0xe4>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b30      	ldr	r3, [pc, #192]	@ (8000230 <MX_GPIO_Init+0xe4>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000178:	4b2d      	ldr	r3, [pc, #180]	@ (8000230 <MX_GPIO_Init+0xe4>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a2c      	ldr	r2, [pc, #176]	@ (8000230 <MX_GPIO_Init+0xe4>)
 800017e:	f043 0320 	orr.w	r3, r3, #32
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b2a      	ldr	r3, [pc, #168]	@ (8000230 <MX_GPIO_Init+0xe4>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0320 	and.w	r3, r3, #32
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000190:	4b27      	ldr	r3, [pc, #156]	@ (8000230 <MX_GPIO_Init+0xe4>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a26      	ldr	r2, [pc, #152]	@ (8000230 <MX_GPIO_Init+0xe4>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b24      	ldr	r3, [pc, #144]	@ (8000230 <MX_GPIO_Init+0xe4>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a8:	4b21      	ldr	r3, [pc, #132]	@ (8000230 <MX_GPIO_Init+0xe4>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	4a20      	ldr	r2, [pc, #128]	@ (8000230 <MX_GPIO_Init+0xe4>)
 80001ae:	f043 0308 	orr.w	r3, r3, #8
 80001b2:	6193      	str	r3, [r2, #24]
 80001b4:	4b1e      	ldr	r3, [pc, #120]	@ (8000230 <MX_GPIO_Init+0xe4>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	f003 0308 	and.w	r3, r3, #8
 80001bc:	603b      	str	r3, [r7, #0]
 80001be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_VERDE_GPIO_Port, LED_VERDE_Pin, GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001c6:	481b      	ldr	r0, [pc, #108]	@ (8000234 <MX_GPIO_Init+0xe8>)
 80001c8:	f000 ffa7 	bl	800111a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin, GPIO_PIN_RESET);
 80001cc:	2200      	movs	r2, #0
 80001ce:	210f      	movs	r1, #15
 80001d0:	4819      	ldr	r0, [pc, #100]	@ (8000238 <MX_GPIO_Init+0xec>)
 80001d2:	f000 ffa2 	bl	800111a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_VERDE_Pin;
 80001d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80001da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001dc:	2301      	movs	r3, #1
 80001de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001e0:	2300      	movs	r3, #0
 80001e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001e4:	2302      	movs	r3, #2
 80001e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_VERDE_GPIO_Port, &GPIO_InitStruct);
 80001e8:	f107 0310 	add.w	r3, r7, #16
 80001ec:	4619      	mov	r1, r3
 80001ee:	4811      	ldr	r0, [pc, #68]	@ (8000234 <MX_GPIO_Init+0xe8>)
 80001f0:	f000 fdf8 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin;
 80001f4:	230f      	movs	r3, #15
 80001f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001f8:	2301      	movs	r3, #1
 80001fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001fc:	2300      	movs	r3, #0
 80001fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000200:	2302      	movs	r3, #2
 8000202:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000204:	f107 0310 	add.w	r3, r7, #16
 8000208:	4619      	mov	r1, r3
 800020a:	480b      	ldr	r0, [pc, #44]	@ (8000238 <MX_GPIO_Init+0xec>)
 800020c:	f000 fdea 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = TECLA_1_Pin|TECLA_2_Pin;
 8000210:	2330      	movs	r3, #48	@ 0x30
 8000212:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000214:	4b09      	ldr	r3, [pc, #36]	@ (800023c <MX_GPIO_Init+0xf0>)
 8000216:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000218:	2300      	movs	r3, #0
 800021a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800021c:	f107 0310 	add.w	r3, r7, #16
 8000220:	4619      	mov	r1, r3
 8000222:	4805      	ldr	r0, [pc, #20]	@ (8000238 <MX_GPIO_Init+0xec>)
 8000224:	f000 fdde 	bl	8000de4 <HAL_GPIO_Init>

}
 8000228:	bf00      	nop
 800022a:	3720      	adds	r7, #32
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}
 8000230:	40021000 	.word	0x40021000
 8000234:	40011000 	.word	0x40011000
 8000238:	40010800 	.word	0x40010800
 800023c:	10110000 	.word	0x10110000

08000240 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)//habilita la funcion printf
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 100);
 8000248:	1d39      	adds	r1, r7, #4
 800024a:	2364      	movs	r3, #100	@ 0x64
 800024c:	2201      	movs	r2, #1
 800024e:	4804      	ldr	r0, [pc, #16]	@ (8000260 <__io_putchar+0x20>)
 8000250:	f001 fff2 	bl	8002238 <HAL_UART_Transmit>
	return ch;
 8000254:	687b      	ldr	r3, [r7, #4]
}
 8000256:	4618      	mov	r0, r3
 8000258:	3708      	adds	r7, #8
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	200000e8 	.word	0x200000e8

08000264 <debounce>:
//funcion para el debouncing
//pin_tecla solo para puertos A
// numero de tecla para guardar los datos individuales de cada boton en un array
// el tiempo de debounce es de 10ms
void debounce(uint8_t pin_tecla, uint8_t i)
{
 8000264:	b590      	push	{r4, r7, lr}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
 800026a:	4603      	mov	r3, r0
 800026c:	460a      	mov	r2, r1
 800026e:	71fb      	strb	r3, [r7, #7]
 8000270:	4613      	mov	r3, r2
 8000272:	71bb      	strb	r3, [r7, #6]
	switch (estado_boton[i])
 8000274:	79bb      	ldrb	r3, [r7, #6]
 8000276:	4a3e      	ldr	r2, [pc, #248]	@ (8000370 <debounce+0x10c>)
 8000278:	5cd3      	ldrb	r3, [r2, r3]
 800027a:	2b02      	cmp	r3, #2
 800027c:	d056      	beq.n	800032c <debounce+0xc8>
 800027e:	2b02      	cmp	r3, #2
 8000280:	dc71      	bgt.n	8000366 <debounce+0x102>
 8000282:	2b00      	cmp	r3, #0
 8000284:	d002      	beq.n	800028c <debounce+0x28>
 8000286:	2b01      	cmp	r3, #1
 8000288:	d01b      	beq.n	80002c2 <debounce+0x5e>
			printf("Tecla liberada: TEC%d\n\r", i);
			estado_boton[i] = TECLA_INACTIVA;
		}
		break;
	}
}
 800028a:	e06c      	b.n	8000366 <debounce+0x102>
		valor_swich[i]= HAL_GPIO_ReadPin(GPIOA, pin_tecla);//se lee el estado del boton
 800028c:	79fb      	ldrb	r3, [r7, #7]
 800028e:	b29b      	uxth	r3, r3
 8000290:	79bc      	ldrb	r4, [r7, #6]
 8000292:	4619      	mov	r1, r3
 8000294:	4837      	ldr	r0, [pc, #220]	@ (8000374 <debounce+0x110>)
 8000296:	f000 ff29 	bl	80010ec <HAL_GPIO_ReadPin>
 800029a:	4603      	mov	r3, r0
 800029c:	461a      	mov	r2, r3
 800029e:	4b36      	ldr	r3, [pc, #216]	@ (8000378 <debounce+0x114>)
 80002a0:	551a      	strb	r2, [r3, r4]
		if (valor_swich[i] == 1)
 80002a2:	79bb      	ldrb	r3, [r7, #6]
 80002a4:	4a34      	ldr	r2, [pc, #208]	@ (8000378 <debounce+0x114>)
 80002a6:	5cd3      	ldrb	r3, [r2, r3]
 80002a8:	2b01      	cmp	r3, #1
 80002aa:	d159      	bne.n	8000360 <debounce+0xfc>
			valor_swich_anterior[i] = valor_swich[i];
 80002ac:	79ba      	ldrb	r2, [r7, #6]
 80002ae:	79bb      	ldrb	r3, [r7, #6]
 80002b0:	4931      	ldr	r1, [pc, #196]	@ (8000378 <debounce+0x114>)
 80002b2:	5c89      	ldrb	r1, [r1, r2]
 80002b4:	4a31      	ldr	r2, [pc, #196]	@ (800037c <debounce+0x118>)
 80002b6:	54d1      	strb	r1, [r2, r3]
			estado_boton[i] = TECLA_PRESIONADA;
 80002b8:	79bb      	ldrb	r3, [r7, #6]
 80002ba:	4a2d      	ldr	r2, [pc, #180]	@ (8000370 <debounce+0x10c>)
 80002bc:	2101      	movs	r1, #1
 80002be:	54d1      	strb	r1, [r2, r3]
		break;
 80002c0:	e04e      	b.n	8000360 <debounce+0xfc>
		valor_swich[i] = HAL_GPIO_ReadPin(GPIOA, pin_tecla);//se lee el estado del boton
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	b29b      	uxth	r3, r3
 80002c6:	79bc      	ldrb	r4, [r7, #6]
 80002c8:	4619      	mov	r1, r3
 80002ca:	482a      	ldr	r0, [pc, #168]	@ (8000374 <debounce+0x110>)
 80002cc:	f000 ff0e 	bl	80010ec <HAL_GPIO_ReadPin>
 80002d0:	4603      	mov	r3, r0
 80002d2:	461a      	mov	r2, r3
 80002d4:	4b28      	ldr	r3, [pc, #160]	@ (8000378 <debounce+0x114>)
 80002d6:	551a      	strb	r2, [r3, r4]
		if (valor_swich[i] == valor_swich_anterior[i]|| contador[i] > TIEMPO_DEBOUNCE)//comparamos valor anterior con el valor actual
 80002d8:	79bb      	ldrb	r3, [r7, #6]
 80002da:	4a27      	ldr	r2, [pc, #156]	@ (8000378 <debounce+0x114>)
 80002dc:	5cd2      	ldrb	r2, [r2, r3]
 80002de:	79bb      	ldrb	r3, [r7, #6]
 80002e0:	4926      	ldr	r1, [pc, #152]	@ (800037c <debounce+0x118>)
 80002e2:	5ccb      	ldrb	r3, [r1, r3]
 80002e4:	429a      	cmp	r2, r3
 80002e6:	d006      	beq.n	80002f6 <debounce+0x92>
 80002e8:	79bb      	ldrb	r3, [r7, #6]
 80002ea:	4a25      	ldr	r2, [pc, #148]	@ (8000380 <debounce+0x11c>)
 80002ec:	5cd2      	ldrb	r2, [r2, r3]
 80002ee:	4b25      	ldr	r3, [pc, #148]	@ (8000384 <debounce+0x120>)
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	429a      	cmp	r2, r3
 80002f4:	d90d      	bls.n	8000312 <debounce+0xae>
			printf("Tecla apretada: TEC%d\n\r", i);
 80002f6:	79bb      	ldrb	r3, [r7, #6]
 80002f8:	4619      	mov	r1, r3
 80002fa:	4823      	ldr	r0, [pc, #140]	@ (8000388 <debounce+0x124>)
 80002fc:	f002 fe86 	bl	800300c <iprintf>
			valor_swich_anterior[i] = 0;
 8000300:	79bb      	ldrb	r3, [r7, #6]
 8000302:	4a1e      	ldr	r2, [pc, #120]	@ (800037c <debounce+0x118>)
 8000304:	2100      	movs	r1, #0
 8000306:	54d1      	strb	r1, [r2, r3]
			estado_boton[i] = TECLA_LIBERADA;
 8000308:	79bb      	ldrb	r3, [r7, #6]
 800030a:	4a19      	ldr	r2, [pc, #100]	@ (8000370 <debounce+0x10c>)
 800030c:	2102      	movs	r1, #2
 800030e:	54d1      	strb	r1, [r2, r3]
 8000310:	e003      	b.n	800031a <debounce+0xb6>
			estado_boton[i] = TECLA_INACTIVA;
 8000312:	79bb      	ldrb	r3, [r7, #6]
 8000314:	4a16      	ldr	r2, [pc, #88]	@ (8000370 <debounce+0x10c>)
 8000316:	2100      	movs	r1, #0
 8000318:	54d1      	strb	r1, [r2, r3]
		contador[i] = contador[i] + 1;
 800031a:	79bb      	ldrb	r3, [r7, #6]
 800031c:	4a18      	ldr	r2, [pc, #96]	@ (8000380 <debounce+0x11c>)
 800031e:	5cd2      	ldrb	r2, [r2, r3]
 8000320:	79bb      	ldrb	r3, [r7, #6]
 8000322:	3201      	adds	r2, #1
 8000324:	b2d1      	uxtb	r1, r2
 8000326:	4a16      	ldr	r2, [pc, #88]	@ (8000380 <debounce+0x11c>)
 8000328:	54d1      	strb	r1, [r2, r3]
		break;
 800032a:	e01c      	b.n	8000366 <debounce+0x102>
		valor_swich[i] = HAL_GPIO_ReadPin(GPIOA, pin_tecla);//se lee el estado del boton
 800032c:	79fb      	ldrb	r3, [r7, #7]
 800032e:	b29b      	uxth	r3, r3
 8000330:	79bc      	ldrb	r4, [r7, #6]
 8000332:	4619      	mov	r1, r3
 8000334:	480f      	ldr	r0, [pc, #60]	@ (8000374 <debounce+0x110>)
 8000336:	f000 fed9 	bl	80010ec <HAL_GPIO_ReadPin>
 800033a:	4603      	mov	r3, r0
 800033c:	461a      	mov	r2, r3
 800033e:	4b0e      	ldr	r3, [pc, #56]	@ (8000378 <debounce+0x114>)
 8000340:	551a      	strb	r2, [r3, r4]
		if (valor_swich[i] == 0)
 8000342:	79bb      	ldrb	r3, [r7, #6]
 8000344:	4a0c      	ldr	r2, [pc, #48]	@ (8000378 <debounce+0x114>)
 8000346:	5cd3      	ldrb	r3, [r2, r3]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d10b      	bne.n	8000364 <debounce+0x100>
			printf("Tecla liberada: TEC%d\n\r", i);
 800034c:	79bb      	ldrb	r3, [r7, #6]
 800034e:	4619      	mov	r1, r3
 8000350:	480e      	ldr	r0, [pc, #56]	@ (800038c <debounce+0x128>)
 8000352:	f002 fe5b 	bl	800300c <iprintf>
			estado_boton[i] = TECLA_INACTIVA;
 8000356:	79bb      	ldrb	r3, [r7, #6]
 8000358:	4a05      	ldr	r2, [pc, #20]	@ (8000370 <debounce+0x10c>)
 800035a:	2100      	movs	r1, #0
 800035c:	54d1      	strb	r1, [r2, r3]
		break;
 800035e:	e001      	b.n	8000364 <debounce+0x100>
		break;
 8000360:	bf00      	nop
 8000362:	e000      	b.n	8000366 <debounce+0x102>
		break;
 8000364:	bf00      	nop
}
 8000366:	bf00      	nop
 8000368:	370c      	adds	r7, #12
 800036a:	46bd      	mov	sp, r7
 800036c:	bd90      	pop	{r4, r7, pc}
 800036e:	bf00      	nop
 8000370:	2000008c 	.word	0x2000008c
 8000374:	40010800 	.word	0x40010800
 8000378:	20000098 	.word	0x20000098
 800037c:	20000094 	.word	0x20000094
 8000380:	20000090 	.word	0x20000090
 8000384:	20000000 	.word	0x20000000
 8000388:	08003d14 	.word	0x08003d14
 800038c:	08003d2c 	.word	0x08003d2c

08000390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000394:	f000 fb04 	bl	80009a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000398:	f000 f85c 	bl	8000454 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800039c:	f7ff fed6 	bl	800014c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80003a0:	f000 fa5a 	bl	8000858 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80003a4:	f000 f9e8 	bl	8000778 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &dato, 1);
 80003a8:	2201      	movs	r2, #1
 80003aa:	4925      	ldr	r1, [pc, #148]	@ (8000440 <main+0xb0>)
 80003ac:	4825      	ldr	r0, [pc, #148]	@ (8000444 <main+0xb4>)
 80003ae:	f001 ffc6 	bl	800233e <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80003b2:	4825      	ldr	r0, [pc, #148]	@ (8000448 <main+0xb8>)
 80003b4:	f001 fb42 	bl	8001a3c <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch (dato)
 80003b8:	4b21      	ldr	r3, [pc, #132]	@ (8000440 <main+0xb0>)
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	3b61      	subs	r3, #97	@ 0x61
 80003be:	2b12      	cmp	r3, #18
 80003c0:	d8fa      	bhi.n	80003b8 <main+0x28>
 80003c2:	a201      	add	r2, pc, #4	@ (adr r2, 80003c8 <main+0x38>)
 80003c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003c8:	08000415 	.word	0x08000415
 80003cc:	080003b9 	.word	0x080003b9
 80003d0:	080003b9 	.word	0x080003b9
 80003d4:	08000429 	.word	0x08000429
 80003d8:	080003b9 	.word	0x080003b9
 80003dc:	08000433 	.word	0x08000433
 80003e0:	080003b9 	.word	0x080003b9
 80003e4:	080003b9 	.word	0x080003b9
 80003e8:	080003b9 	.word	0x080003b9
 80003ec:	080003b9 	.word	0x080003b9
 80003f0:	080003b9 	.word	0x080003b9
 80003f4:	080003b9 	.word	0x080003b9
 80003f8:	080003b9 	.word	0x080003b9
 80003fc:	080003b9 	.word	0x080003b9
 8000400:	080003b9 	.word	0x080003b9
 8000404:	080003b9 	.word	0x080003b9
 8000408:	080003b9 	.word	0x080003b9
 800040c:	080003b9 	.word	0x080003b9
 8000410:	0800041f 	.word	0x0800041f
	  {
	  case COMMAND_LED1_TOGGLE:
		  HAL_GPIO_TogglePin(GPIOC, LED_1_Pin);
 8000414:	2101      	movs	r1, #1
 8000416:	480d      	ldr	r0, [pc, #52]	@ (800044c <main+0xbc>)
 8000418:	f000 fe97 	bl	800114a <HAL_GPIO_TogglePin>
		  break;
 800041c:	e00f      	b.n	800043e <main+0xae>

	  case COMMAND_LED2_TOGGLE:
		  HAL_GPIO_TogglePin(GPIOA, LED_2_Pin);
 800041e:	2102      	movs	r1, #2
 8000420:	480b      	ldr	r0, [pc, #44]	@ (8000450 <main+0xc0>)
 8000422:	f000 fe92 	bl	800114a <HAL_GPIO_TogglePin>
		  break;
 8000426:	e00a      	b.n	800043e <main+0xae>

	  case COMMAND_LED3_TOGGLE:
		  HAL_GPIO_TogglePin(GPIOA, LED_3_Pin);
 8000428:	2104      	movs	r1, #4
 800042a:	4809      	ldr	r0, [pc, #36]	@ (8000450 <main+0xc0>)
 800042c:	f000 fe8d 	bl	800114a <HAL_GPIO_TogglePin>
		  break;
 8000430:	e005      	b.n	800043e <main+0xae>

	  case COMMAND_LED4_TOGGLE:
		  HAL_GPIO_TogglePin(GPIOA, LED_4_Pin);
 8000432:	2108      	movs	r1, #8
 8000434:	4806      	ldr	r0, [pc, #24]	@ (8000450 <main+0xc0>)
 8000436:	f000 fe88 	bl	800114a <HAL_GPIO_TogglePin>
		  break;
 800043a:	bf00      	nop
 800043c:	e7bc      	b.n	80003b8 <main+0x28>
	  switch (dato)
 800043e:	e7bb      	b.n	80003b8 <main+0x28>
 8000440:	20000088 	.word	0x20000088
 8000444:	200000e8 	.word	0x200000e8
 8000448:	200000a0 	.word	0x200000a0
 800044c:	40011000 	.word	0x40011000
 8000450:	40010800 	.word	0x40010800

08000454 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b090      	sub	sp, #64	@ 0x40
 8000458:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800045a:	f107 0318 	add.w	r3, r7, #24
 800045e:	2228      	movs	r2, #40	@ 0x28
 8000460:	2100      	movs	r1, #0
 8000462:	4618      	mov	r0, r3
 8000464:	f002 fe27 	bl	80030b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000468:	1d3b      	adds	r3, r7, #4
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	605a      	str	r2, [r3, #4]
 8000470:	609a      	str	r2, [r3, #8]
 8000472:	60da      	str	r2, [r3, #12]
 8000474:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000476:	2301      	movs	r3, #1
 8000478:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800047a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800047e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000480:	2300      	movs	r3, #0
 8000482:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000484:	2301      	movs	r3, #1
 8000486:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000488:	2302      	movs	r3, #2
 800048a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800048c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000490:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000492:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000496:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000498:	f107 0318 	add.w	r3, r7, #24
 800049c:	4618      	mov	r0, r3
 800049e:	f000 fe6d 	bl	800117c <HAL_RCC_OscConfig>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <SystemClock_Config+0x58>
  {
    Error_Handler();
 80004a8:	f000 f847 	bl	800053a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ac:	230f      	movs	r3, #15
 80004ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004b0:	2302      	movs	r3, #2
 80004b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004b4:	2300      	movs	r3, #0
 80004b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004be:	2300      	movs	r3, #0
 80004c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	2102      	movs	r1, #2
 80004c6:	4618      	mov	r0, r3
 80004c8:	f001 f8da 	bl	8001680 <HAL_RCC_ClockConfig>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004d2:	f000 f832 	bl	800053a <Error_Handler>
  }
}
 80004d6:	bf00      	nop
 80004d8:	3740      	adds	r7, #64	@ 0x40
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
	...

080004e0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a05      	ldr	r2, [pc, #20]	@ (8000504 <HAL_UART_RxCpltCallback+0x24>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d104      	bne.n	80004fc <HAL_UART_RxCpltCallback+0x1c>
	{
		HAL_UART_Receive_IT(&huart3, &dato, 1);//recivimos el dato y lo guardamos en la variable dato
 80004f2:	2201      	movs	r2, #1
 80004f4:	4904      	ldr	r1, [pc, #16]	@ (8000508 <HAL_UART_RxCpltCallback+0x28>)
 80004f6:	4805      	ldr	r0, [pc, #20]	@ (800050c <HAL_UART_RxCpltCallback+0x2c>)
 80004f8:	f001 ff21 	bl	800233e <HAL_UART_Receive_IT>
	}
}
 80004fc:	bf00      	nop
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40004800 	.word	0x40004800
 8000508:	20000088 	.word	0x20000088
 800050c:	200000e8 	.word	0x200000e8

08000510 <HAL_TIM_PeriodElapsedCallback>:

//interrupcion cada 1ms
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000520:	d107      	bne.n	8000532 <HAL_TIM_PeriodElapsedCallback+0x22>
  {
	  debounce(TECLA_1_Pin, 0);
 8000522:	2100      	movs	r1, #0
 8000524:	2010      	movs	r0, #16
 8000526:	f7ff fe9d 	bl	8000264 <debounce>
	  debounce(TECLA_2_Pin, 1);
 800052a:	2101      	movs	r1, #1
 800052c:	2020      	movs	r0, #32
 800052e:	f7ff fe99 	bl	8000264 <debounce>
  }
}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}

0800053a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800053a:	b480      	push	{r7}
 800053c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800053e:	b672      	cpsid	i
}
 8000540:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000542:	bf00      	nop
 8000544:	e7fd      	b.n	8000542 <Error_Handler+0x8>
	...

08000548 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000548:	b480      	push	{r7}
 800054a:	b085      	sub	sp, #20
 800054c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800054e:	4b15      	ldr	r3, [pc, #84]	@ (80005a4 <HAL_MspInit+0x5c>)
 8000550:	699b      	ldr	r3, [r3, #24]
 8000552:	4a14      	ldr	r2, [pc, #80]	@ (80005a4 <HAL_MspInit+0x5c>)
 8000554:	f043 0301 	orr.w	r3, r3, #1
 8000558:	6193      	str	r3, [r2, #24]
 800055a:	4b12      	ldr	r3, [pc, #72]	@ (80005a4 <HAL_MspInit+0x5c>)
 800055c:	699b      	ldr	r3, [r3, #24]
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000566:	4b0f      	ldr	r3, [pc, #60]	@ (80005a4 <HAL_MspInit+0x5c>)
 8000568:	69db      	ldr	r3, [r3, #28]
 800056a:	4a0e      	ldr	r2, [pc, #56]	@ (80005a4 <HAL_MspInit+0x5c>)
 800056c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000570:	61d3      	str	r3, [r2, #28]
 8000572:	4b0c      	ldr	r3, [pc, #48]	@ (80005a4 <HAL_MspInit+0x5c>)
 8000574:	69db      	ldr	r3, [r3, #28]
 8000576:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800057e:	4b0a      	ldr	r3, [pc, #40]	@ (80005a8 <HAL_MspInit+0x60>)
 8000580:	685b      	ldr	r3, [r3, #4]
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	4a04      	ldr	r2, [pc, #16]	@ (80005a8 <HAL_MspInit+0x60>)
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800059a:	bf00      	nop
 800059c:	3714      	adds	r7, #20
 800059e:	46bd      	mov	sp, r7
 80005a0:	bc80      	pop	{r7}
 80005a2:	4770      	bx	lr
 80005a4:	40021000 	.word	0x40021000
 80005a8:	40010000 	.word	0x40010000

080005ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005b0:	bf00      	nop
 80005b2:	e7fd      	b.n	80005b0 <NMI_Handler+0x4>

080005b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005b8:	bf00      	nop
 80005ba:	e7fd      	b.n	80005b8 <HardFault_Handler+0x4>

080005bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005c0:	bf00      	nop
 80005c2:	e7fd      	b.n	80005c0 <MemManage_Handler+0x4>

080005c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005c8:	bf00      	nop
 80005ca:	e7fd      	b.n	80005c8 <BusFault_Handler+0x4>

080005cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005d0:	bf00      	nop
 80005d2:	e7fd      	b.n	80005d0 <UsageFault_Handler+0x4>

080005d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	bc80      	pop	{r7}
 80005de:	4770      	bx	lr

080005e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bc80      	pop	{r7}
 80005ea:	4770      	bx	lr

080005ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bc80      	pop	{r7}
 80005f6:	4770      	bx	lr

080005f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005fc:	f000 fa16 	bl	8000a2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}

08000604 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000608:	4802      	ldr	r0, [pc, #8]	@ (8000614 <TIM2_IRQHandler+0x10>)
 800060a:	f001 fa69 	bl	8001ae0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	200000a0 	.word	0x200000a0

08000618 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800061c:	4802      	ldr	r0, [pc, #8]	@ (8000628 <USART3_IRQHandler+0x10>)
 800061e:	f001 feb3 	bl	8002388 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	200000e8 	.word	0x200000e8

0800062c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]
 800063c:	e00a      	b.n	8000654 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800063e:	f3af 8000 	nop.w
 8000642:	4601      	mov	r1, r0
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	1c5a      	adds	r2, r3, #1
 8000648:	60ba      	str	r2, [r7, #8]
 800064a:	b2ca      	uxtb	r2, r1
 800064c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	3301      	adds	r3, #1
 8000652:	617b      	str	r3, [r7, #20]
 8000654:	697a      	ldr	r2, [r7, #20]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	429a      	cmp	r2, r3
 800065a:	dbf0      	blt.n	800063e <_read+0x12>
  }

  return len;
 800065c:	687b      	ldr	r3, [r7, #4]
}
 800065e:	4618      	mov	r0, r3
 8000660:	3718      	adds	r7, #24
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}

08000666 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000666:	b580      	push	{r7, lr}
 8000668:	b086      	sub	sp, #24
 800066a:	af00      	add	r7, sp, #0
 800066c:	60f8      	str	r0, [r7, #12]
 800066e:	60b9      	str	r1, [r7, #8]
 8000670:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]
 8000676:	e009      	b.n	800068c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	1c5a      	adds	r2, r3, #1
 800067c:	60ba      	str	r2, [r7, #8]
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff fddd 	bl	8000240 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	3301      	adds	r3, #1
 800068a:	617b      	str	r3, [r7, #20]
 800068c:	697a      	ldr	r2, [r7, #20]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	429a      	cmp	r2, r3
 8000692:	dbf1      	blt.n	8000678 <_write+0x12>
  }
  return len;
 8000694:	687b      	ldr	r3, [r7, #4]
}
 8000696:	4618      	mov	r0, r3
 8000698:	3718      	adds	r7, #24
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}

0800069e <_close>:

int _close(int file)
{
 800069e:	b480      	push	{r7}
 80006a0:	b083      	sub	sp, #12
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80006a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr

080006b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80006c4:	605a      	str	r2, [r3, #4]
  return 0;
 80006c6:	2300      	movs	r3, #0
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bc80      	pop	{r7}
 80006d0:	4770      	bx	lr

080006d2 <_isatty>:

int _isatty(int file)
{
 80006d2:	b480      	push	{r7}
 80006d4:	b083      	sub	sp, #12
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80006da:	2301      	movs	r3, #1
}
 80006dc:	4618      	mov	r0, r3
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr

080006e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006e6:	b480      	push	{r7}
 80006e8:	b085      	sub	sp, #20
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	60f8      	str	r0, [r7, #12]
 80006ee:	60b9      	str	r1, [r7, #8]
 80006f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80006f2:	2300      	movs	r3, #0
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3714      	adds	r7, #20
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bc80      	pop	{r7}
 80006fc:	4770      	bx	lr
	...

08000700 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b086      	sub	sp, #24
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000708:	4a14      	ldr	r2, [pc, #80]	@ (800075c <_sbrk+0x5c>)
 800070a:	4b15      	ldr	r3, [pc, #84]	@ (8000760 <_sbrk+0x60>)
 800070c:	1ad3      	subs	r3, r2, r3
 800070e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000714:	4b13      	ldr	r3, [pc, #76]	@ (8000764 <_sbrk+0x64>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d102      	bne.n	8000722 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800071c:	4b11      	ldr	r3, [pc, #68]	@ (8000764 <_sbrk+0x64>)
 800071e:	4a12      	ldr	r2, [pc, #72]	@ (8000768 <_sbrk+0x68>)
 8000720:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000722:	4b10      	ldr	r3, [pc, #64]	@ (8000764 <_sbrk+0x64>)
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4413      	add	r3, r2
 800072a:	693a      	ldr	r2, [r7, #16]
 800072c:	429a      	cmp	r2, r3
 800072e:	d207      	bcs.n	8000740 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000730:	f002 fd10 	bl	8003154 <__errno>
 8000734:	4603      	mov	r3, r0
 8000736:	220c      	movs	r2, #12
 8000738:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800073a:	f04f 33ff 	mov.w	r3, #4294967295
 800073e:	e009      	b.n	8000754 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000740:	4b08      	ldr	r3, [pc, #32]	@ (8000764 <_sbrk+0x64>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000746:	4b07      	ldr	r3, [pc, #28]	@ (8000764 <_sbrk+0x64>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4413      	add	r3, r2
 800074e:	4a05      	ldr	r2, [pc, #20]	@ (8000764 <_sbrk+0x64>)
 8000750:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000752:	68fb      	ldr	r3, [r7, #12]
}
 8000754:	4618      	mov	r0, r3
 8000756:	3718      	adds	r7, #24
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20005000 	.word	0x20005000
 8000760:	00000400 	.word	0x00000400
 8000764:	2000009c 	.word	0x2000009c
 8000768:	20000280 	.word	0x20000280

0800076c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr

08000778 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800077e:	f107 0308 	add.w	r3, r7, #8
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800078c:	463b      	mov	r3, r7
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000794:	4b1d      	ldr	r3, [pc, #116]	@ (800080c <MX_TIM2_Init+0x94>)
 8000796:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800079a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 800079c:	4b1b      	ldr	r3, [pc, #108]	@ (800080c <MX_TIM2_Init+0x94>)
 800079e:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80007a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a4:	4b19      	ldr	r3, [pc, #100]	@ (800080c <MX_TIM2_Init+0x94>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 80007aa:	4b18      	ldr	r3, [pc, #96]	@ (800080c <MX_TIM2_Init+0x94>)
 80007ac:	220a      	movs	r2, #10
 80007ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007b0:	4b16      	ldr	r3, [pc, #88]	@ (800080c <MX_TIM2_Init+0x94>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007b6:	4b15      	ldr	r3, [pc, #84]	@ (800080c <MX_TIM2_Init+0x94>)
 80007b8:	2280      	movs	r2, #128	@ 0x80
 80007ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007bc:	4813      	ldr	r0, [pc, #76]	@ (800080c <MX_TIM2_Init+0x94>)
 80007be:	f001 f8ed 	bl	800199c <HAL_TIM_Base_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80007c8:	f7ff feb7 	bl	800053a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007d2:	f107 0308 	add.w	r3, r7, #8
 80007d6:	4619      	mov	r1, r3
 80007d8:	480c      	ldr	r0, [pc, #48]	@ (800080c <MX_TIM2_Init+0x94>)
 80007da:	f001 fa89 	bl	8001cf0 <HAL_TIM_ConfigClockSource>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80007e4:	f7ff fea9 	bl	800053a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e8:	2300      	movs	r3, #0
 80007ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ec:	2300      	movs	r3, #0
 80007ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007f0:	463b      	mov	r3, r7
 80007f2:	4619      	mov	r1, r3
 80007f4:	4805      	ldr	r0, [pc, #20]	@ (800080c <MX_TIM2_Init+0x94>)
 80007f6:	f001 fc5f 	bl	80020b8 <HAL_TIMEx_MasterConfigSynchronization>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000800:	f7ff fe9b 	bl	800053a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000804:	bf00      	nop
 8000806:	3718      	adds	r7, #24
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	200000a0 	.word	0x200000a0

08000810 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000820:	d113      	bne.n	800084a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000822:	4b0c      	ldr	r3, [pc, #48]	@ (8000854 <HAL_TIM_Base_MspInit+0x44>)
 8000824:	69db      	ldr	r3, [r3, #28]
 8000826:	4a0b      	ldr	r2, [pc, #44]	@ (8000854 <HAL_TIM_Base_MspInit+0x44>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	61d3      	str	r3, [r2, #28]
 800082e:	4b09      	ldr	r3, [pc, #36]	@ (8000854 <HAL_TIM_Base_MspInit+0x44>)
 8000830:	69db      	ldr	r3, [r3, #28]
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800083a:	2200      	movs	r2, #0
 800083c:	2100      	movs	r1, #0
 800083e:	201c      	movs	r0, #28
 8000840:	f000 f9e7 	bl	8000c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000844:	201c      	movs	r0, #28
 8000846:	f000 fa00 	bl	8000c4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800084a:	bf00      	nop
 800084c:	3710      	adds	r7, #16
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40021000 	.word	0x40021000

08000858 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800085c:	4b11      	ldr	r3, [pc, #68]	@ (80008a4 <MX_USART3_UART_Init+0x4c>)
 800085e:	4a12      	ldr	r2, [pc, #72]	@ (80008a8 <MX_USART3_UART_Init+0x50>)
 8000860:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000862:	4b10      	ldr	r3, [pc, #64]	@ (80008a4 <MX_USART3_UART_Init+0x4c>)
 8000864:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000868:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800086a:	4b0e      	ldr	r3, [pc, #56]	@ (80008a4 <MX_USART3_UART_Init+0x4c>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000870:	4b0c      	ldr	r3, [pc, #48]	@ (80008a4 <MX_USART3_UART_Init+0x4c>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000876:	4b0b      	ldr	r3, [pc, #44]	@ (80008a4 <MX_USART3_UART_Init+0x4c>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800087c:	4b09      	ldr	r3, [pc, #36]	@ (80008a4 <MX_USART3_UART_Init+0x4c>)
 800087e:	220c      	movs	r2, #12
 8000880:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000882:	4b08      	ldr	r3, [pc, #32]	@ (80008a4 <MX_USART3_UART_Init+0x4c>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000888:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <MX_USART3_UART_Init+0x4c>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800088e:	4805      	ldr	r0, [pc, #20]	@ (80008a4 <MX_USART3_UART_Init+0x4c>)
 8000890:	f001 fc82 	bl	8002198 <HAL_UART_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800089a:	f7ff fe4e 	bl	800053a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	200000e8 	.word	0x200000e8
 80008a8:	40004800 	.word	0x40004800

080008ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b088      	sub	sp, #32
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	f107 0310 	add.w	r3, r7, #16
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART3)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a20      	ldr	r2, [pc, #128]	@ (8000948 <HAL_UART_MspInit+0x9c>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d139      	bne.n	8000940 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80008cc:	4b1f      	ldr	r3, [pc, #124]	@ (800094c <HAL_UART_MspInit+0xa0>)
 80008ce:	69db      	ldr	r3, [r3, #28]
 80008d0:	4a1e      	ldr	r2, [pc, #120]	@ (800094c <HAL_UART_MspInit+0xa0>)
 80008d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80008d6:	61d3      	str	r3, [r2, #28]
 80008d8:	4b1c      	ldr	r3, [pc, #112]	@ (800094c <HAL_UART_MspInit+0xa0>)
 80008da:	69db      	ldr	r3, [r3, #28]
 80008dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e4:	4b19      	ldr	r3, [pc, #100]	@ (800094c <HAL_UART_MspInit+0xa0>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	4a18      	ldr	r2, [pc, #96]	@ (800094c <HAL_UART_MspInit+0xa0>)
 80008ea:	f043 0308 	orr.w	r3, r3, #8
 80008ee:	6193      	str	r3, [r2, #24]
 80008f0:	4b16      	ldr	r3, [pc, #88]	@ (800094c <HAL_UART_MspInit+0xa0>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	f003 0308 	and.w	r3, r3, #8
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000900:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000906:	2303      	movs	r3, #3
 8000908:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090a:	f107 0310 	add.w	r3, r7, #16
 800090e:	4619      	mov	r1, r3
 8000910:	480f      	ldr	r0, [pc, #60]	@ (8000950 <HAL_UART_MspInit+0xa4>)
 8000912:	f000 fa67 	bl	8000de4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000916:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800091a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000924:	f107 0310 	add.w	r3, r7, #16
 8000928:	4619      	mov	r1, r3
 800092a:	4809      	ldr	r0, [pc, #36]	@ (8000950 <HAL_UART_MspInit+0xa4>)
 800092c:	f000 fa5a 	bl	8000de4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000930:	2200      	movs	r2, #0
 8000932:	2100      	movs	r1, #0
 8000934:	2027      	movs	r0, #39	@ 0x27
 8000936:	f000 f96c 	bl	8000c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800093a:	2027      	movs	r0, #39	@ 0x27
 800093c:	f000 f985 	bl	8000c4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000940:	bf00      	nop
 8000942:	3720      	adds	r7, #32
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40004800 	.word	0x40004800
 800094c:	40021000 	.word	0x40021000
 8000950:	40010c00 	.word	0x40010c00

08000954 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000954:	f7ff ff0a 	bl	800076c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000958:	480b      	ldr	r0, [pc, #44]	@ (8000988 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800095a:	490c      	ldr	r1, [pc, #48]	@ (800098c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800095c:	4a0c      	ldr	r2, [pc, #48]	@ (8000990 <LoopFillZerobss+0x16>)
  movs r3, #0
 800095e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000960:	e002      	b.n	8000968 <LoopCopyDataInit>

08000962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000966:	3304      	adds	r3, #4

08000968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800096a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800096c:	d3f9      	bcc.n	8000962 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096e:	4a09      	ldr	r2, [pc, #36]	@ (8000994 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000970:	4c09      	ldr	r4, [pc, #36]	@ (8000998 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000972:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000974:	e001      	b.n	800097a <LoopFillZerobss>

08000976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000978:	3204      	adds	r2, #4

0800097a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800097a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800097c:	d3fb      	bcc.n	8000976 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800097e:	f002 fbef 	bl	8003160 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000982:	f7ff fd05 	bl	8000390 <main>
  bx lr
 8000986:	4770      	bx	lr
  ldr r0, =_sdata
 8000988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800098c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000990:	08003dac 	.word	0x08003dac
  ldr r2, =_sbss
 8000994:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000998:	20000280 	.word	0x20000280

0800099c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800099c:	e7fe      	b.n	800099c <ADC1_2_IRQHandler>
	...

080009a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009a4:	4b08      	ldr	r3, [pc, #32]	@ (80009c8 <HAL_Init+0x28>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a07      	ldr	r2, [pc, #28]	@ (80009c8 <HAL_Init+0x28>)
 80009aa:	f043 0310 	orr.w	r3, r3, #16
 80009ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b0:	2003      	movs	r0, #3
 80009b2:	f000 f923 	bl	8000bfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009b6:	200f      	movs	r0, #15
 80009b8:	f000 f808 	bl	80009cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009bc:	f7ff fdc4 	bl	8000548 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009c0:	2300      	movs	r3, #0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40022000 	.word	0x40022000

080009cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009d4:	4b12      	ldr	r3, [pc, #72]	@ (8000a20 <HAL_InitTick+0x54>)
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	4b12      	ldr	r3, [pc, #72]	@ (8000a24 <HAL_InitTick+0x58>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	4619      	mov	r1, r3
 80009de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ea:	4618      	mov	r0, r3
 80009ec:	f000 f93b 	bl	8000c66 <HAL_SYSTICK_Config>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
 80009f8:	e00e      	b.n	8000a18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2b0f      	cmp	r3, #15
 80009fe:	d80a      	bhi.n	8000a16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a00:	2200      	movs	r2, #0
 8000a02:	6879      	ldr	r1, [r7, #4]
 8000a04:	f04f 30ff 	mov.w	r0, #4294967295
 8000a08:	f000 f903 	bl	8000c12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a0c:	4a06      	ldr	r2, [pc, #24]	@ (8000a28 <HAL_InitTick+0x5c>)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a12:	2300      	movs	r3, #0
 8000a14:	e000      	b.n	8000a18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000004 	.word	0x20000004
 8000a24:	2000000c 	.word	0x2000000c
 8000a28:	20000008 	.word	0x20000008

08000a2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a30:	4b05      	ldr	r3, [pc, #20]	@ (8000a48 <HAL_IncTick+0x1c>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	461a      	mov	r2, r3
 8000a36:	4b05      	ldr	r3, [pc, #20]	@ (8000a4c <HAL_IncTick+0x20>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	4a03      	ldr	r2, [pc, #12]	@ (8000a4c <HAL_IncTick+0x20>)
 8000a3e:	6013      	str	r3, [r2, #0]
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr
 8000a48:	2000000c 	.word	0x2000000c
 8000a4c:	20000130 	.word	0x20000130

08000a50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  return uwTick;
 8000a54:	4b02      	ldr	r3, [pc, #8]	@ (8000a60 <HAL_GetTick+0x10>)
 8000a56:	681b      	ldr	r3, [r3, #0]
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr
 8000a60:	20000130 	.word	0x20000130

08000a64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f003 0307 	and.w	r3, r3, #7
 8000a72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a74:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a7a:	68ba      	ldr	r2, [r7, #8]
 8000a7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a80:	4013      	ands	r3, r2
 8000a82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a96:	4a04      	ldr	r2, [pc, #16]	@ (8000aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	60d3      	str	r3, [r2, #12]
}
 8000a9c:	bf00      	nop
 8000a9e:	3714      	adds	r7, #20
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc80      	pop	{r7}
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ab0:	4b04      	ldr	r3, [pc, #16]	@ (8000ac4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	0a1b      	lsrs	r3, r3, #8
 8000ab6:	f003 0307 	and.w	r3, r3, #7
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bc80      	pop	{r7}
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	db0b      	blt.n	8000af2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	f003 021f 	and.w	r2, r3, #31
 8000ae0:	4906      	ldr	r1, [pc, #24]	@ (8000afc <__NVIC_EnableIRQ+0x34>)
 8000ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae6:	095b      	lsrs	r3, r3, #5
 8000ae8:	2001      	movs	r0, #1
 8000aea:	fa00 f202 	lsl.w	r2, r0, r2
 8000aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr
 8000afc:	e000e100 	.word	0xe000e100

08000b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	6039      	str	r1, [r7, #0]
 8000b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	db0a      	blt.n	8000b2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	b2da      	uxtb	r2, r3
 8000b18:	490c      	ldr	r1, [pc, #48]	@ (8000b4c <__NVIC_SetPriority+0x4c>)
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	0112      	lsls	r2, r2, #4
 8000b20:	b2d2      	uxtb	r2, r2
 8000b22:	440b      	add	r3, r1
 8000b24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b28:	e00a      	b.n	8000b40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	b2da      	uxtb	r2, r3
 8000b2e:	4908      	ldr	r1, [pc, #32]	@ (8000b50 <__NVIC_SetPriority+0x50>)
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	f003 030f 	and.w	r3, r3, #15
 8000b36:	3b04      	subs	r3, #4
 8000b38:	0112      	lsls	r2, r2, #4
 8000b3a:	b2d2      	uxtb	r2, r2
 8000b3c:	440b      	add	r3, r1
 8000b3e:	761a      	strb	r2, [r3, #24]
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bc80      	pop	{r7}
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000e100 	.word	0xe000e100
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b089      	sub	sp, #36	@ 0x24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	f003 0307 	and.w	r3, r3, #7
 8000b66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	f1c3 0307 	rsb	r3, r3, #7
 8000b6e:	2b04      	cmp	r3, #4
 8000b70:	bf28      	it	cs
 8000b72:	2304      	movcs	r3, #4
 8000b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	3304      	adds	r3, #4
 8000b7a:	2b06      	cmp	r3, #6
 8000b7c:	d902      	bls.n	8000b84 <NVIC_EncodePriority+0x30>
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	3b03      	subs	r3, #3
 8000b82:	e000      	b.n	8000b86 <NVIC_EncodePriority+0x32>
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b88:	f04f 32ff 	mov.w	r2, #4294967295
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	43da      	mvns	r2, r3
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	401a      	ands	r2, r3
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba6:	43d9      	mvns	r1, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bac:	4313      	orrs	r3, r2
         );
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3724      	adds	r7, #36	@ 0x24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bc80      	pop	{r7}
 8000bb6:	4770      	bx	lr

08000bb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bc8:	d301      	bcc.n	8000bce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e00f      	b.n	8000bee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bce:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf8 <SysTick_Config+0x40>)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bd6:	210f      	movs	r1, #15
 8000bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bdc:	f7ff ff90 	bl	8000b00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be0:	4b05      	ldr	r3, [pc, #20]	@ (8000bf8 <SysTick_Config+0x40>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000be6:	4b04      	ldr	r3, [pc, #16]	@ (8000bf8 <SysTick_Config+0x40>)
 8000be8:	2207      	movs	r2, #7
 8000bea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	e000e010 	.word	0xe000e010

08000bfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f7ff ff2d 	bl	8000a64 <__NVIC_SetPriorityGrouping>
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b086      	sub	sp, #24
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	4603      	mov	r3, r0
 8000c1a:	60b9      	str	r1, [r7, #8]
 8000c1c:	607a      	str	r2, [r7, #4]
 8000c1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c24:	f7ff ff42 	bl	8000aac <__NVIC_GetPriorityGrouping>
 8000c28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	68b9      	ldr	r1, [r7, #8]
 8000c2e:	6978      	ldr	r0, [r7, #20]
 8000c30:	f7ff ff90 	bl	8000b54 <NVIC_EncodePriority>
 8000c34:	4602      	mov	r2, r0
 8000c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c3a:	4611      	mov	r1, r2
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff ff5f 	bl	8000b00 <__NVIC_SetPriority>
}
 8000c42:	bf00      	nop
 8000c44:	3718      	adds	r7, #24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b082      	sub	sp, #8
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	4603      	mov	r3, r0
 8000c52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff ff35 	bl	8000ac8 <__NVIC_EnableIRQ>
}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b082      	sub	sp, #8
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f7ff ffa2 	bl	8000bb8 <SysTick_Config>
 8000c74:	4603      	mov	r3, r0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	b085      	sub	sp, #20
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c86:	2300      	movs	r3, #0
 8000c88:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	2b02      	cmp	r3, #2
 8000c94:	d008      	beq.n	8000ca8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2204      	movs	r2, #4
 8000c9a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	e020      	b.n	8000cea <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f022 020e 	bic.w	r2, r2, #14
 8000cb6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f022 0201 	bic.w	r2, r2, #1
 8000cc6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fa01 f202 	lsl.w	r2, r1, r2
 8000cd6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2201      	movs	r2, #1
 8000cdc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3714      	adds	r7, #20
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr

08000cf4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d005      	beq.n	8000d18 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2204      	movs	r2, #4
 8000d10:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	73fb      	strb	r3, [r7, #15]
 8000d16:	e051      	b.n	8000dbc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f022 020e 	bic.w	r2, r2, #14
 8000d26:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f022 0201 	bic.w	r2, r2, #1
 8000d36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a22      	ldr	r2, [pc, #136]	@ (8000dc8 <HAL_DMA_Abort_IT+0xd4>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d029      	beq.n	8000d96 <HAL_DMA_Abort_IT+0xa2>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a21      	ldr	r2, [pc, #132]	@ (8000dcc <HAL_DMA_Abort_IT+0xd8>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d022      	beq.n	8000d92 <HAL_DMA_Abort_IT+0x9e>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a1f      	ldr	r2, [pc, #124]	@ (8000dd0 <HAL_DMA_Abort_IT+0xdc>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d01a      	beq.n	8000d8c <HAL_DMA_Abort_IT+0x98>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a1e      	ldr	r2, [pc, #120]	@ (8000dd4 <HAL_DMA_Abort_IT+0xe0>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d012      	beq.n	8000d86 <HAL_DMA_Abort_IT+0x92>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a1c      	ldr	r2, [pc, #112]	@ (8000dd8 <HAL_DMA_Abort_IT+0xe4>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d00a      	beq.n	8000d80 <HAL_DMA_Abort_IT+0x8c>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a1b      	ldr	r2, [pc, #108]	@ (8000ddc <HAL_DMA_Abort_IT+0xe8>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d102      	bne.n	8000d7a <HAL_DMA_Abort_IT+0x86>
 8000d74:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000d78:	e00e      	b.n	8000d98 <HAL_DMA_Abort_IT+0xa4>
 8000d7a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000d7e:	e00b      	b.n	8000d98 <HAL_DMA_Abort_IT+0xa4>
 8000d80:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d84:	e008      	b.n	8000d98 <HAL_DMA_Abort_IT+0xa4>
 8000d86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d8a:	e005      	b.n	8000d98 <HAL_DMA_Abort_IT+0xa4>
 8000d8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d90:	e002      	b.n	8000d98 <HAL_DMA_Abort_IT+0xa4>
 8000d92:	2310      	movs	r3, #16
 8000d94:	e000      	b.n	8000d98 <HAL_DMA_Abort_IT+0xa4>
 8000d96:	2301      	movs	r3, #1
 8000d98:	4a11      	ldr	r2, [pc, #68]	@ (8000de0 <HAL_DMA_Abort_IT+0xec>)
 8000d9a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2201      	movs	r2, #1
 8000da0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2200      	movs	r2, #0
 8000da8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d003      	beq.n	8000dbc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	4798      	blx	r3
    } 
  }
  return status;
 8000dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40020008 	.word	0x40020008
 8000dcc:	4002001c 	.word	0x4002001c
 8000dd0:	40020030 	.word	0x40020030
 8000dd4:	40020044 	.word	0x40020044
 8000dd8:	40020058 	.word	0x40020058
 8000ddc:	4002006c 	.word	0x4002006c
 8000de0:	40020000 	.word	0x40020000

08000de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b08b      	sub	sp, #44	@ 0x2c
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dee:	2300      	movs	r3, #0
 8000df0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000df2:	2300      	movs	r3, #0
 8000df4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000df6:	e169      	b.n	80010cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000df8:	2201      	movs	r2, #1
 8000dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	69fa      	ldr	r2, [r7, #28]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	f040 8158 	bne.w	80010c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	4a9a      	ldr	r2, [pc, #616]	@ (8001084 <HAL_GPIO_Init+0x2a0>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d05e      	beq.n	8000ede <HAL_GPIO_Init+0xfa>
 8000e20:	4a98      	ldr	r2, [pc, #608]	@ (8001084 <HAL_GPIO_Init+0x2a0>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d875      	bhi.n	8000f12 <HAL_GPIO_Init+0x12e>
 8000e26:	4a98      	ldr	r2, [pc, #608]	@ (8001088 <HAL_GPIO_Init+0x2a4>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d058      	beq.n	8000ede <HAL_GPIO_Init+0xfa>
 8000e2c:	4a96      	ldr	r2, [pc, #600]	@ (8001088 <HAL_GPIO_Init+0x2a4>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d86f      	bhi.n	8000f12 <HAL_GPIO_Init+0x12e>
 8000e32:	4a96      	ldr	r2, [pc, #600]	@ (800108c <HAL_GPIO_Init+0x2a8>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d052      	beq.n	8000ede <HAL_GPIO_Init+0xfa>
 8000e38:	4a94      	ldr	r2, [pc, #592]	@ (800108c <HAL_GPIO_Init+0x2a8>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d869      	bhi.n	8000f12 <HAL_GPIO_Init+0x12e>
 8000e3e:	4a94      	ldr	r2, [pc, #592]	@ (8001090 <HAL_GPIO_Init+0x2ac>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d04c      	beq.n	8000ede <HAL_GPIO_Init+0xfa>
 8000e44:	4a92      	ldr	r2, [pc, #584]	@ (8001090 <HAL_GPIO_Init+0x2ac>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d863      	bhi.n	8000f12 <HAL_GPIO_Init+0x12e>
 8000e4a:	4a92      	ldr	r2, [pc, #584]	@ (8001094 <HAL_GPIO_Init+0x2b0>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d046      	beq.n	8000ede <HAL_GPIO_Init+0xfa>
 8000e50:	4a90      	ldr	r2, [pc, #576]	@ (8001094 <HAL_GPIO_Init+0x2b0>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d85d      	bhi.n	8000f12 <HAL_GPIO_Init+0x12e>
 8000e56:	2b12      	cmp	r3, #18
 8000e58:	d82a      	bhi.n	8000eb0 <HAL_GPIO_Init+0xcc>
 8000e5a:	2b12      	cmp	r3, #18
 8000e5c:	d859      	bhi.n	8000f12 <HAL_GPIO_Init+0x12e>
 8000e5e:	a201      	add	r2, pc, #4	@ (adr r2, 8000e64 <HAL_GPIO_Init+0x80>)
 8000e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e64:	08000edf 	.word	0x08000edf
 8000e68:	08000eb9 	.word	0x08000eb9
 8000e6c:	08000ecb 	.word	0x08000ecb
 8000e70:	08000f0d 	.word	0x08000f0d
 8000e74:	08000f13 	.word	0x08000f13
 8000e78:	08000f13 	.word	0x08000f13
 8000e7c:	08000f13 	.word	0x08000f13
 8000e80:	08000f13 	.word	0x08000f13
 8000e84:	08000f13 	.word	0x08000f13
 8000e88:	08000f13 	.word	0x08000f13
 8000e8c:	08000f13 	.word	0x08000f13
 8000e90:	08000f13 	.word	0x08000f13
 8000e94:	08000f13 	.word	0x08000f13
 8000e98:	08000f13 	.word	0x08000f13
 8000e9c:	08000f13 	.word	0x08000f13
 8000ea0:	08000f13 	.word	0x08000f13
 8000ea4:	08000f13 	.word	0x08000f13
 8000ea8:	08000ec1 	.word	0x08000ec1
 8000eac:	08000ed5 	.word	0x08000ed5
 8000eb0:	4a79      	ldr	r2, [pc, #484]	@ (8001098 <HAL_GPIO_Init+0x2b4>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d013      	beq.n	8000ede <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000eb6:	e02c      	b.n	8000f12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	623b      	str	r3, [r7, #32]
          break;
 8000ebe:	e029      	b.n	8000f14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	3304      	adds	r3, #4
 8000ec6:	623b      	str	r3, [r7, #32]
          break;
 8000ec8:	e024      	b.n	8000f14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	3308      	adds	r3, #8
 8000ed0:	623b      	str	r3, [r7, #32]
          break;
 8000ed2:	e01f      	b.n	8000f14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	330c      	adds	r3, #12
 8000eda:	623b      	str	r3, [r7, #32]
          break;
 8000edc:	e01a      	b.n	8000f14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d102      	bne.n	8000eec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ee6:	2304      	movs	r3, #4
 8000ee8:	623b      	str	r3, [r7, #32]
          break;
 8000eea:	e013      	b.n	8000f14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d105      	bne.n	8000f00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ef4:	2308      	movs	r3, #8
 8000ef6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	69fa      	ldr	r2, [r7, #28]
 8000efc:	611a      	str	r2, [r3, #16]
          break;
 8000efe:	e009      	b.n	8000f14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f00:	2308      	movs	r3, #8
 8000f02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	69fa      	ldr	r2, [r7, #28]
 8000f08:	615a      	str	r2, [r3, #20]
          break;
 8000f0a:	e003      	b.n	8000f14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	623b      	str	r3, [r7, #32]
          break;
 8000f10:	e000      	b.n	8000f14 <HAL_GPIO_Init+0x130>
          break;
 8000f12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	2bff      	cmp	r3, #255	@ 0xff
 8000f18:	d801      	bhi.n	8000f1e <HAL_GPIO_Init+0x13a>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	e001      	b.n	8000f22 <HAL_GPIO_Init+0x13e>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	3304      	adds	r3, #4
 8000f22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	2bff      	cmp	r3, #255	@ 0xff
 8000f28:	d802      	bhi.n	8000f30 <HAL_GPIO_Init+0x14c>
 8000f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	e002      	b.n	8000f36 <HAL_GPIO_Init+0x152>
 8000f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f32:	3b08      	subs	r3, #8
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	210f      	movs	r1, #15
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	fa01 f303 	lsl.w	r3, r1, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	401a      	ands	r2, r3
 8000f48:	6a39      	ldr	r1, [r7, #32]
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f50:	431a      	orrs	r2, r3
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	f000 80b1 	beq.w	80010c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f64:	4b4d      	ldr	r3, [pc, #308]	@ (800109c <HAL_GPIO_Init+0x2b8>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	4a4c      	ldr	r2, [pc, #304]	@ (800109c <HAL_GPIO_Init+0x2b8>)
 8000f6a:	f043 0301 	orr.w	r3, r3, #1
 8000f6e:	6193      	str	r3, [r2, #24]
 8000f70:	4b4a      	ldr	r3, [pc, #296]	@ (800109c <HAL_GPIO_Init+0x2b8>)
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f7c:	4a48      	ldr	r2, [pc, #288]	@ (80010a0 <HAL_GPIO_Init+0x2bc>)
 8000f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f80:	089b      	lsrs	r3, r3, #2
 8000f82:	3302      	adds	r3, #2
 8000f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f8c:	f003 0303 	and.w	r3, r3, #3
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	220f      	movs	r2, #15
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a40      	ldr	r2, [pc, #256]	@ (80010a4 <HAL_GPIO_Init+0x2c0>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d013      	beq.n	8000fd0 <HAL_GPIO_Init+0x1ec>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4a3f      	ldr	r2, [pc, #252]	@ (80010a8 <HAL_GPIO_Init+0x2c4>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d00d      	beq.n	8000fcc <HAL_GPIO_Init+0x1e8>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a3e      	ldr	r2, [pc, #248]	@ (80010ac <HAL_GPIO_Init+0x2c8>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d007      	beq.n	8000fc8 <HAL_GPIO_Init+0x1e4>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a3d      	ldr	r2, [pc, #244]	@ (80010b0 <HAL_GPIO_Init+0x2cc>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d101      	bne.n	8000fc4 <HAL_GPIO_Init+0x1e0>
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	e006      	b.n	8000fd2 <HAL_GPIO_Init+0x1ee>
 8000fc4:	2304      	movs	r3, #4
 8000fc6:	e004      	b.n	8000fd2 <HAL_GPIO_Init+0x1ee>
 8000fc8:	2302      	movs	r3, #2
 8000fca:	e002      	b.n	8000fd2 <HAL_GPIO_Init+0x1ee>
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e000      	b.n	8000fd2 <HAL_GPIO_Init+0x1ee>
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000fd4:	f002 0203 	and.w	r2, r2, #3
 8000fd8:	0092      	lsls	r2, r2, #2
 8000fda:	4093      	lsls	r3, r2
 8000fdc:	68fa      	ldr	r2, [r7, #12]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fe2:	492f      	ldr	r1, [pc, #188]	@ (80010a0 <HAL_GPIO_Init+0x2bc>)
 8000fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fe6:	089b      	lsrs	r3, r3, #2
 8000fe8:	3302      	adds	r3, #2
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d006      	beq.n	800100a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ffc:	4b2d      	ldr	r3, [pc, #180]	@ (80010b4 <HAL_GPIO_Init+0x2d0>)
 8000ffe:	689a      	ldr	r2, [r3, #8]
 8001000:	492c      	ldr	r1, [pc, #176]	@ (80010b4 <HAL_GPIO_Init+0x2d0>)
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	4313      	orrs	r3, r2
 8001006:	608b      	str	r3, [r1, #8]
 8001008:	e006      	b.n	8001018 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800100a:	4b2a      	ldr	r3, [pc, #168]	@ (80010b4 <HAL_GPIO_Init+0x2d0>)
 800100c:	689a      	ldr	r2, [r3, #8]
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	43db      	mvns	r3, r3
 8001012:	4928      	ldr	r1, [pc, #160]	@ (80010b4 <HAL_GPIO_Init+0x2d0>)
 8001014:	4013      	ands	r3, r2
 8001016:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d006      	beq.n	8001032 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001024:	4b23      	ldr	r3, [pc, #140]	@ (80010b4 <HAL_GPIO_Init+0x2d0>)
 8001026:	68da      	ldr	r2, [r3, #12]
 8001028:	4922      	ldr	r1, [pc, #136]	@ (80010b4 <HAL_GPIO_Init+0x2d0>)
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	4313      	orrs	r3, r2
 800102e:	60cb      	str	r3, [r1, #12]
 8001030:	e006      	b.n	8001040 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001032:	4b20      	ldr	r3, [pc, #128]	@ (80010b4 <HAL_GPIO_Init+0x2d0>)
 8001034:	68da      	ldr	r2, [r3, #12]
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	43db      	mvns	r3, r3
 800103a:	491e      	ldr	r1, [pc, #120]	@ (80010b4 <HAL_GPIO_Init+0x2d0>)
 800103c:	4013      	ands	r3, r2
 800103e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d006      	beq.n	800105a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800104c:	4b19      	ldr	r3, [pc, #100]	@ (80010b4 <HAL_GPIO_Init+0x2d0>)
 800104e:	685a      	ldr	r2, [r3, #4]
 8001050:	4918      	ldr	r1, [pc, #96]	@ (80010b4 <HAL_GPIO_Init+0x2d0>)
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	4313      	orrs	r3, r2
 8001056:	604b      	str	r3, [r1, #4]
 8001058:	e006      	b.n	8001068 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800105a:	4b16      	ldr	r3, [pc, #88]	@ (80010b4 <HAL_GPIO_Init+0x2d0>)
 800105c:	685a      	ldr	r2, [r3, #4]
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	43db      	mvns	r3, r3
 8001062:	4914      	ldr	r1, [pc, #80]	@ (80010b4 <HAL_GPIO_Init+0x2d0>)
 8001064:	4013      	ands	r3, r2
 8001066:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d021      	beq.n	80010b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001074:	4b0f      	ldr	r3, [pc, #60]	@ (80010b4 <HAL_GPIO_Init+0x2d0>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	490e      	ldr	r1, [pc, #56]	@ (80010b4 <HAL_GPIO_Init+0x2d0>)
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	4313      	orrs	r3, r2
 800107e:	600b      	str	r3, [r1, #0]
 8001080:	e021      	b.n	80010c6 <HAL_GPIO_Init+0x2e2>
 8001082:	bf00      	nop
 8001084:	10320000 	.word	0x10320000
 8001088:	10310000 	.word	0x10310000
 800108c:	10220000 	.word	0x10220000
 8001090:	10210000 	.word	0x10210000
 8001094:	10120000 	.word	0x10120000
 8001098:	10110000 	.word	0x10110000
 800109c:	40021000 	.word	0x40021000
 80010a0:	40010000 	.word	0x40010000
 80010a4:	40010800 	.word	0x40010800
 80010a8:	40010c00 	.word	0x40010c00
 80010ac:	40011000 	.word	0x40011000
 80010b0:	40011400 	.word	0x40011400
 80010b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010b8:	4b0b      	ldr	r3, [pc, #44]	@ (80010e8 <HAL_GPIO_Init+0x304>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	43db      	mvns	r3, r3
 80010c0:	4909      	ldr	r1, [pc, #36]	@ (80010e8 <HAL_GPIO_Init+0x304>)
 80010c2:	4013      	ands	r3, r2
 80010c4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80010c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c8:	3301      	adds	r3, #1
 80010ca:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d2:	fa22 f303 	lsr.w	r3, r2, r3
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	f47f ae8e 	bne.w	8000df8 <HAL_GPIO_Init+0x14>
  }
}
 80010dc:	bf00      	nop
 80010de:	bf00      	nop
 80010e0:	372c      	adds	r7, #44	@ 0x2c
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr
 80010e8:	40010400 	.word	0x40010400

080010ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	460b      	mov	r3, r1
 80010f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	689a      	ldr	r2, [r3, #8]
 80010fc:	887b      	ldrh	r3, [r7, #2]
 80010fe:	4013      	ands	r3, r2
 8001100:	2b00      	cmp	r3, #0
 8001102:	d002      	beq.n	800110a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001104:	2301      	movs	r3, #1
 8001106:	73fb      	strb	r3, [r7, #15]
 8001108:	e001      	b.n	800110e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800110a:	2300      	movs	r3, #0
 800110c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800110e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr

0800111a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800111a:	b480      	push	{r7}
 800111c:	b083      	sub	sp, #12
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
 8001122:	460b      	mov	r3, r1
 8001124:	807b      	strh	r3, [r7, #2]
 8001126:	4613      	mov	r3, r2
 8001128:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800112a:	787b      	ldrb	r3, [r7, #1]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d003      	beq.n	8001138 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001130:	887a      	ldrh	r2, [r7, #2]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001136:	e003      	b.n	8001140 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001138:	887b      	ldrh	r3, [r7, #2]
 800113a:	041a      	lsls	r2, r3, #16
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	611a      	str	r2, [r3, #16]
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	bc80      	pop	{r7}
 8001148:	4770      	bx	lr

0800114a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800114a:	b480      	push	{r7}
 800114c:	b085      	sub	sp, #20
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
 8001152:	460b      	mov	r3, r1
 8001154:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800115c:	887a      	ldrh	r2, [r7, #2]
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	4013      	ands	r3, r2
 8001162:	041a      	lsls	r2, r3, #16
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	43d9      	mvns	r1, r3
 8001168:	887b      	ldrh	r3, [r7, #2]
 800116a:	400b      	ands	r3, r1
 800116c:	431a      	orrs	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	611a      	str	r2, [r3, #16]
}
 8001172:	bf00      	nop
 8001174:	3714      	adds	r7, #20
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr

0800117c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d101      	bne.n	800118e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e272      	b.n	8001674 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	2b00      	cmp	r3, #0
 8001198:	f000 8087 	beq.w	80012aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800119c:	4b92      	ldr	r3, [pc, #584]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 030c 	and.w	r3, r3, #12
 80011a4:	2b04      	cmp	r3, #4
 80011a6:	d00c      	beq.n	80011c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011a8:	4b8f      	ldr	r3, [pc, #572]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 030c 	and.w	r3, r3, #12
 80011b0:	2b08      	cmp	r3, #8
 80011b2:	d112      	bne.n	80011da <HAL_RCC_OscConfig+0x5e>
 80011b4:	4b8c      	ldr	r3, [pc, #560]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011c0:	d10b      	bne.n	80011da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c2:	4b89      	ldr	r3, [pc, #548]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d06c      	beq.n	80012a8 <HAL_RCC_OscConfig+0x12c>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d168      	bne.n	80012a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e24c      	b.n	8001674 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011e2:	d106      	bne.n	80011f2 <HAL_RCC_OscConfig+0x76>
 80011e4:	4b80      	ldr	r3, [pc, #512]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a7f      	ldr	r2, [pc, #508]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 80011ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011ee:	6013      	str	r3, [r2, #0]
 80011f0:	e02e      	b.n	8001250 <HAL_RCC_OscConfig+0xd4>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d10c      	bne.n	8001214 <HAL_RCC_OscConfig+0x98>
 80011fa:	4b7b      	ldr	r3, [pc, #492]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a7a      	ldr	r2, [pc, #488]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 8001200:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	4b78      	ldr	r3, [pc, #480]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a77      	ldr	r2, [pc, #476]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 800120c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	e01d      	b.n	8001250 <HAL_RCC_OscConfig+0xd4>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800121c:	d10c      	bne.n	8001238 <HAL_RCC_OscConfig+0xbc>
 800121e:	4b72      	ldr	r3, [pc, #456]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a71      	ldr	r2, [pc, #452]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 8001224:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001228:	6013      	str	r3, [r2, #0]
 800122a:	4b6f      	ldr	r3, [pc, #444]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a6e      	ldr	r2, [pc, #440]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 8001230:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001234:	6013      	str	r3, [r2, #0]
 8001236:	e00b      	b.n	8001250 <HAL_RCC_OscConfig+0xd4>
 8001238:	4b6b      	ldr	r3, [pc, #428]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a6a      	ldr	r2, [pc, #424]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 800123e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	4b68      	ldr	r3, [pc, #416]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a67      	ldr	r2, [pc, #412]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 800124a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800124e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d013      	beq.n	8001280 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001258:	f7ff fbfa 	bl	8000a50 <HAL_GetTick>
 800125c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800125e:	e008      	b.n	8001272 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001260:	f7ff fbf6 	bl	8000a50 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b64      	cmp	r3, #100	@ 0x64
 800126c:	d901      	bls.n	8001272 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e200      	b.n	8001674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001272:	4b5d      	ldr	r3, [pc, #372]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d0f0      	beq.n	8001260 <HAL_RCC_OscConfig+0xe4>
 800127e:	e014      	b.n	80012aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001280:	f7ff fbe6 	bl	8000a50 <HAL_GetTick>
 8001284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001288:	f7ff fbe2 	bl	8000a50 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b64      	cmp	r3, #100	@ 0x64
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e1ec      	b.n	8001674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800129a:	4b53      	ldr	r3, [pc, #332]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1f0      	bne.n	8001288 <HAL_RCC_OscConfig+0x10c>
 80012a6:	e000      	b.n	80012aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d063      	beq.n	800137e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012b6:	4b4c      	ldr	r3, [pc, #304]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f003 030c 	and.w	r3, r3, #12
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d00b      	beq.n	80012da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012c2:	4b49      	ldr	r3, [pc, #292]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f003 030c 	and.w	r3, r3, #12
 80012ca:	2b08      	cmp	r3, #8
 80012cc:	d11c      	bne.n	8001308 <HAL_RCC_OscConfig+0x18c>
 80012ce:	4b46      	ldr	r3, [pc, #280]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d116      	bne.n	8001308 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012da:	4b43      	ldr	r3, [pc, #268]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d005      	beq.n	80012f2 <HAL_RCC_OscConfig+0x176>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	691b      	ldr	r3, [r3, #16]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d001      	beq.n	80012f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e1c0      	b.n	8001674 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f2:	4b3d      	ldr	r3, [pc, #244]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	4939      	ldr	r1, [pc, #228]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 8001302:	4313      	orrs	r3, r2
 8001304:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001306:	e03a      	b.n	800137e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	691b      	ldr	r3, [r3, #16]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d020      	beq.n	8001352 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001310:	4b36      	ldr	r3, [pc, #216]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 8001312:	2201      	movs	r2, #1
 8001314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001316:	f7ff fb9b 	bl	8000a50 <HAL_GetTick>
 800131a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800131e:	f7ff fb97 	bl	8000a50 <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e1a1      	b.n	8001674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001330:	4b2d      	ldr	r3, [pc, #180]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d0f0      	beq.n	800131e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800133c:	4b2a      	ldr	r3, [pc, #168]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	695b      	ldr	r3, [r3, #20]
 8001348:	00db      	lsls	r3, r3, #3
 800134a:	4927      	ldr	r1, [pc, #156]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 800134c:	4313      	orrs	r3, r2
 800134e:	600b      	str	r3, [r1, #0]
 8001350:	e015      	b.n	800137e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001352:	4b26      	ldr	r3, [pc, #152]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001358:	f7ff fb7a 	bl	8000a50 <HAL_GetTick>
 800135c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001360:	f7ff fb76 	bl	8000a50 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e180      	b.n	8001674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001372:	4b1d      	ldr	r3, [pc, #116]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1f0      	bne.n	8001360 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0308 	and.w	r3, r3, #8
 8001386:	2b00      	cmp	r3, #0
 8001388:	d03a      	beq.n	8001400 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d019      	beq.n	80013c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001392:	4b17      	ldr	r3, [pc, #92]	@ (80013f0 <HAL_RCC_OscConfig+0x274>)
 8001394:	2201      	movs	r2, #1
 8001396:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001398:	f7ff fb5a 	bl	8000a50 <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013a0:	f7ff fb56 	bl	8000a50 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e160      	b.n	8001674 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013b2:	4b0d      	ldr	r3, [pc, #52]	@ (80013e8 <HAL_RCC_OscConfig+0x26c>)
 80013b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d0f0      	beq.n	80013a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013be:	2001      	movs	r0, #1
 80013c0:	f000 face 	bl	8001960 <RCC_Delay>
 80013c4:	e01c      	b.n	8001400 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013c6:	4b0a      	ldr	r3, [pc, #40]	@ (80013f0 <HAL_RCC_OscConfig+0x274>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013cc:	f7ff fb40 	bl	8000a50 <HAL_GetTick>
 80013d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013d2:	e00f      	b.n	80013f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013d4:	f7ff fb3c 	bl	8000a50 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d908      	bls.n	80013f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e146      	b.n	8001674 <HAL_RCC_OscConfig+0x4f8>
 80013e6:	bf00      	nop
 80013e8:	40021000 	.word	0x40021000
 80013ec:	42420000 	.word	0x42420000
 80013f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013f4:	4b92      	ldr	r3, [pc, #584]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 80013f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d1e9      	bne.n	80013d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0304 	and.w	r3, r3, #4
 8001408:	2b00      	cmp	r3, #0
 800140a:	f000 80a6 	beq.w	800155a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800140e:	2300      	movs	r3, #0
 8001410:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001412:	4b8b      	ldr	r3, [pc, #556]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 8001414:	69db      	ldr	r3, [r3, #28]
 8001416:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d10d      	bne.n	800143a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800141e:	4b88      	ldr	r3, [pc, #544]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	4a87      	ldr	r2, [pc, #540]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 8001424:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001428:	61d3      	str	r3, [r2, #28]
 800142a:	4b85      	ldr	r3, [pc, #532]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001436:	2301      	movs	r3, #1
 8001438:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800143a:	4b82      	ldr	r3, [pc, #520]	@ (8001644 <HAL_RCC_OscConfig+0x4c8>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001442:	2b00      	cmp	r3, #0
 8001444:	d118      	bne.n	8001478 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001446:	4b7f      	ldr	r3, [pc, #508]	@ (8001644 <HAL_RCC_OscConfig+0x4c8>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a7e      	ldr	r2, [pc, #504]	@ (8001644 <HAL_RCC_OscConfig+0x4c8>)
 800144c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001450:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001452:	f7ff fafd 	bl	8000a50 <HAL_GetTick>
 8001456:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001458:	e008      	b.n	800146c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800145a:	f7ff faf9 	bl	8000a50 <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b64      	cmp	r3, #100	@ 0x64
 8001466:	d901      	bls.n	800146c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e103      	b.n	8001674 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800146c:	4b75      	ldr	r3, [pc, #468]	@ (8001644 <HAL_RCC_OscConfig+0x4c8>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001474:	2b00      	cmp	r3, #0
 8001476:	d0f0      	beq.n	800145a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d106      	bne.n	800148e <HAL_RCC_OscConfig+0x312>
 8001480:	4b6f      	ldr	r3, [pc, #444]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 8001482:	6a1b      	ldr	r3, [r3, #32]
 8001484:	4a6e      	ldr	r2, [pc, #440]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	6213      	str	r3, [r2, #32]
 800148c:	e02d      	b.n	80014ea <HAL_RCC_OscConfig+0x36e>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d10c      	bne.n	80014b0 <HAL_RCC_OscConfig+0x334>
 8001496:	4b6a      	ldr	r3, [pc, #424]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 8001498:	6a1b      	ldr	r3, [r3, #32]
 800149a:	4a69      	ldr	r2, [pc, #420]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 800149c:	f023 0301 	bic.w	r3, r3, #1
 80014a0:	6213      	str	r3, [r2, #32]
 80014a2:	4b67      	ldr	r3, [pc, #412]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 80014a4:	6a1b      	ldr	r3, [r3, #32]
 80014a6:	4a66      	ldr	r2, [pc, #408]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 80014a8:	f023 0304 	bic.w	r3, r3, #4
 80014ac:	6213      	str	r3, [r2, #32]
 80014ae:	e01c      	b.n	80014ea <HAL_RCC_OscConfig+0x36e>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	2b05      	cmp	r3, #5
 80014b6:	d10c      	bne.n	80014d2 <HAL_RCC_OscConfig+0x356>
 80014b8:	4b61      	ldr	r3, [pc, #388]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	4a60      	ldr	r2, [pc, #384]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 80014be:	f043 0304 	orr.w	r3, r3, #4
 80014c2:	6213      	str	r3, [r2, #32]
 80014c4:	4b5e      	ldr	r3, [pc, #376]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 80014c6:	6a1b      	ldr	r3, [r3, #32]
 80014c8:	4a5d      	ldr	r2, [pc, #372]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 80014ca:	f043 0301 	orr.w	r3, r3, #1
 80014ce:	6213      	str	r3, [r2, #32]
 80014d0:	e00b      	b.n	80014ea <HAL_RCC_OscConfig+0x36e>
 80014d2:	4b5b      	ldr	r3, [pc, #364]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 80014d4:	6a1b      	ldr	r3, [r3, #32]
 80014d6:	4a5a      	ldr	r2, [pc, #360]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 80014d8:	f023 0301 	bic.w	r3, r3, #1
 80014dc:	6213      	str	r3, [r2, #32]
 80014de:	4b58      	ldr	r3, [pc, #352]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 80014e0:	6a1b      	ldr	r3, [r3, #32]
 80014e2:	4a57      	ldr	r2, [pc, #348]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 80014e4:	f023 0304 	bic.w	r3, r3, #4
 80014e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d015      	beq.n	800151e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f2:	f7ff faad 	bl	8000a50 <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f8:	e00a      	b.n	8001510 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014fa:	f7ff faa9 	bl	8000a50 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001508:	4293      	cmp	r3, r2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e0b1      	b.n	8001674 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001510:	4b4b      	ldr	r3, [pc, #300]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 8001512:	6a1b      	ldr	r3, [r3, #32]
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d0ee      	beq.n	80014fa <HAL_RCC_OscConfig+0x37e>
 800151c:	e014      	b.n	8001548 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800151e:	f7ff fa97 	bl	8000a50 <HAL_GetTick>
 8001522:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001524:	e00a      	b.n	800153c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001526:	f7ff fa93 	bl	8000a50 <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001534:	4293      	cmp	r3, r2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e09b      	b.n	8001674 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800153c:	4b40      	ldr	r3, [pc, #256]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 800153e:	6a1b      	ldr	r3, [r3, #32]
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d1ee      	bne.n	8001526 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001548:	7dfb      	ldrb	r3, [r7, #23]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d105      	bne.n	800155a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800154e:	4b3c      	ldr	r3, [pc, #240]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	4a3b      	ldr	r2, [pc, #236]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 8001554:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001558:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	2b00      	cmp	r3, #0
 8001560:	f000 8087 	beq.w	8001672 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001564:	4b36      	ldr	r3, [pc, #216]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 030c 	and.w	r3, r3, #12
 800156c:	2b08      	cmp	r3, #8
 800156e:	d061      	beq.n	8001634 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	69db      	ldr	r3, [r3, #28]
 8001574:	2b02      	cmp	r3, #2
 8001576:	d146      	bne.n	8001606 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001578:	4b33      	ldr	r3, [pc, #204]	@ (8001648 <HAL_RCC_OscConfig+0x4cc>)
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157e:	f7ff fa67 	bl	8000a50 <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001586:	f7ff fa63 	bl	8000a50 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e06d      	b.n	8001674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001598:	4b29      	ldr	r3, [pc, #164]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d1f0      	bne.n	8001586 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a1b      	ldr	r3, [r3, #32]
 80015a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015ac:	d108      	bne.n	80015c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015ae:	4b24      	ldr	r3, [pc, #144]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	4921      	ldr	r1, [pc, #132]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 80015bc:	4313      	orrs	r3, r2
 80015be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a19      	ldr	r1, [r3, #32]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d0:	430b      	orrs	r3, r1
 80015d2:	491b      	ldr	r1, [pc, #108]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001648 <HAL_RCC_OscConfig+0x4cc>)
 80015da:	2201      	movs	r2, #1
 80015dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015de:	f7ff fa37 	bl	8000a50 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e6:	f7ff fa33 	bl	8000a50 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e03d      	b.n	8001674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015f8:	4b11      	ldr	r3, [pc, #68]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d0f0      	beq.n	80015e6 <HAL_RCC_OscConfig+0x46a>
 8001604:	e035      	b.n	8001672 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001606:	4b10      	ldr	r3, [pc, #64]	@ (8001648 <HAL_RCC_OscConfig+0x4cc>)
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160c:	f7ff fa20 	bl	8000a50 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001614:	f7ff fa1c 	bl	8000a50 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e026      	b.n	8001674 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001626:	4b06      	ldr	r3, [pc, #24]	@ (8001640 <HAL_RCC_OscConfig+0x4c4>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f0      	bne.n	8001614 <HAL_RCC_OscConfig+0x498>
 8001632:	e01e      	b.n	8001672 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	69db      	ldr	r3, [r3, #28]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d107      	bne.n	800164c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e019      	b.n	8001674 <HAL_RCC_OscConfig+0x4f8>
 8001640:	40021000 	.word	0x40021000
 8001644:	40007000 	.word	0x40007000
 8001648:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800164c:	4b0b      	ldr	r3, [pc, #44]	@ (800167c <HAL_RCC_OscConfig+0x500>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	429a      	cmp	r2, r3
 800165e:	d106      	bne.n	800166e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800166a:	429a      	cmp	r2, r3
 800166c:	d001      	beq.n	8001672 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e000      	b.n	8001674 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001672:	2300      	movs	r3, #0
}
 8001674:	4618      	mov	r0, r3
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40021000 	.word	0x40021000

08001680 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d101      	bne.n	8001694 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e0d0      	b.n	8001836 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001694:	4b6a      	ldr	r3, [pc, #424]	@ (8001840 <HAL_RCC_ClockConfig+0x1c0>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0307 	and.w	r3, r3, #7
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d910      	bls.n	80016c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016a2:	4b67      	ldr	r3, [pc, #412]	@ (8001840 <HAL_RCC_ClockConfig+0x1c0>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f023 0207 	bic.w	r2, r3, #7
 80016aa:	4965      	ldr	r1, [pc, #404]	@ (8001840 <HAL_RCC_ClockConfig+0x1c0>)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016b2:	4b63      	ldr	r3, [pc, #396]	@ (8001840 <HAL_RCC_ClockConfig+0x1c0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	683a      	ldr	r2, [r7, #0]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d001      	beq.n	80016c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e0b8      	b.n	8001836 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0302 	and.w	r3, r3, #2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d020      	beq.n	8001712 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d005      	beq.n	80016e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016dc:	4b59      	ldr	r3, [pc, #356]	@ (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	4a58      	ldr	r2, [pc, #352]	@ (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 80016e2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80016e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0308 	and.w	r3, r3, #8
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d005      	beq.n	8001700 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016f4:	4b53      	ldr	r3, [pc, #332]	@ (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	4a52      	ldr	r2, [pc, #328]	@ (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 80016fa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80016fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001700:	4b50      	ldr	r3, [pc, #320]	@ (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	494d      	ldr	r1, [pc, #308]	@ (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 800170e:	4313      	orrs	r3, r2
 8001710:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b00      	cmp	r3, #0
 800171c:	d040      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d107      	bne.n	8001736 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001726:	4b47      	ldr	r3, [pc, #284]	@ (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d115      	bne.n	800175e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e07f      	b.n	8001836 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	2b02      	cmp	r3, #2
 800173c:	d107      	bne.n	800174e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800173e:	4b41      	ldr	r3, [pc, #260]	@ (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d109      	bne.n	800175e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e073      	b.n	8001836 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800174e:	4b3d      	ldr	r3, [pc, #244]	@ (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e06b      	b.n	8001836 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800175e:	4b39      	ldr	r3, [pc, #228]	@ (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f023 0203 	bic.w	r2, r3, #3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	4936      	ldr	r1, [pc, #216]	@ (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 800176c:	4313      	orrs	r3, r2
 800176e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001770:	f7ff f96e 	bl	8000a50 <HAL_GetTick>
 8001774:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001776:	e00a      	b.n	800178e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001778:	f7ff f96a 	bl	8000a50 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001786:	4293      	cmp	r3, r2
 8001788:	d901      	bls.n	800178e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e053      	b.n	8001836 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800178e:	4b2d      	ldr	r3, [pc, #180]	@ (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f003 020c 	and.w	r2, r3, #12
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	429a      	cmp	r2, r3
 800179e:	d1eb      	bne.n	8001778 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017a0:	4b27      	ldr	r3, [pc, #156]	@ (8001840 <HAL_RCC_ClockConfig+0x1c0>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0307 	and.w	r3, r3, #7
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d210      	bcs.n	80017d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ae:	4b24      	ldr	r3, [pc, #144]	@ (8001840 <HAL_RCC_ClockConfig+0x1c0>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f023 0207 	bic.w	r2, r3, #7
 80017b6:	4922      	ldr	r1, [pc, #136]	@ (8001840 <HAL_RCC_ClockConfig+0x1c0>)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017be:	4b20      	ldr	r3, [pc, #128]	@ (8001840 <HAL_RCC_ClockConfig+0x1c0>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	683a      	ldr	r2, [r7, #0]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d001      	beq.n	80017d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e032      	b.n	8001836 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0304 	and.w	r3, r3, #4
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d008      	beq.n	80017ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017dc:	4b19      	ldr	r3, [pc, #100]	@ (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	4916      	ldr	r1, [pc, #88]	@ (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 80017ea:	4313      	orrs	r3, r2
 80017ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0308 	and.w	r3, r3, #8
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d009      	beq.n	800180e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017fa:	4b12      	ldr	r3, [pc, #72]	@ (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	490e      	ldr	r1, [pc, #56]	@ (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 800180a:	4313      	orrs	r3, r2
 800180c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800180e:	f000 f821 	bl	8001854 <HAL_RCC_GetSysClockFreq>
 8001812:	4602      	mov	r2, r0
 8001814:	4b0b      	ldr	r3, [pc, #44]	@ (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	091b      	lsrs	r3, r3, #4
 800181a:	f003 030f 	and.w	r3, r3, #15
 800181e:	490a      	ldr	r1, [pc, #40]	@ (8001848 <HAL_RCC_ClockConfig+0x1c8>)
 8001820:	5ccb      	ldrb	r3, [r1, r3]
 8001822:	fa22 f303 	lsr.w	r3, r2, r3
 8001826:	4a09      	ldr	r2, [pc, #36]	@ (800184c <HAL_RCC_ClockConfig+0x1cc>)
 8001828:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800182a:	4b09      	ldr	r3, [pc, #36]	@ (8001850 <HAL_RCC_ClockConfig+0x1d0>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff f8cc 	bl	80009cc <HAL_InitTick>

  return HAL_OK;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40022000 	.word	0x40022000
 8001844:	40021000 	.word	0x40021000
 8001848:	08003d44 	.word	0x08003d44
 800184c:	20000004 	.word	0x20000004
 8001850:	20000008 	.word	0x20000008

08001854 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001854:	b480      	push	{r7}
 8001856:	b087      	sub	sp, #28
 8001858:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	2300      	movs	r3, #0
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
 8001866:	2300      	movs	r3, #0
 8001868:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800186a:	2300      	movs	r3, #0
 800186c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800186e:	4b1e      	ldr	r3, [pc, #120]	@ (80018e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f003 030c 	and.w	r3, r3, #12
 800187a:	2b04      	cmp	r3, #4
 800187c:	d002      	beq.n	8001884 <HAL_RCC_GetSysClockFreq+0x30>
 800187e:	2b08      	cmp	r3, #8
 8001880:	d003      	beq.n	800188a <HAL_RCC_GetSysClockFreq+0x36>
 8001882:	e027      	b.n	80018d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001884:	4b19      	ldr	r3, [pc, #100]	@ (80018ec <HAL_RCC_GetSysClockFreq+0x98>)
 8001886:	613b      	str	r3, [r7, #16]
      break;
 8001888:	e027      	b.n	80018da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	0c9b      	lsrs	r3, r3, #18
 800188e:	f003 030f 	and.w	r3, r3, #15
 8001892:	4a17      	ldr	r2, [pc, #92]	@ (80018f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001894:	5cd3      	ldrb	r3, [r2, r3]
 8001896:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d010      	beq.n	80018c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018a2:	4b11      	ldr	r3, [pc, #68]	@ (80018e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	0c5b      	lsrs	r3, r3, #17
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	4a11      	ldr	r2, [pc, #68]	@ (80018f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80018ae:	5cd3      	ldrb	r3, [r2, r3]
 80018b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a0d      	ldr	r2, [pc, #52]	@ (80018ec <HAL_RCC_GetSysClockFreq+0x98>)
 80018b6:	fb03 f202 	mul.w	r2, r3, r2
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c0:	617b      	str	r3, [r7, #20]
 80018c2:	e004      	b.n	80018ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a0c      	ldr	r2, [pc, #48]	@ (80018f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80018c8:	fb02 f303 	mul.w	r3, r2, r3
 80018cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	613b      	str	r3, [r7, #16]
      break;
 80018d2:	e002      	b.n	80018da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018d4:	4b05      	ldr	r3, [pc, #20]	@ (80018ec <HAL_RCC_GetSysClockFreq+0x98>)
 80018d6:	613b      	str	r3, [r7, #16]
      break;
 80018d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018da:	693b      	ldr	r3, [r7, #16]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	371c      	adds	r7, #28
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	40021000 	.word	0x40021000
 80018ec:	007a1200 	.word	0x007a1200
 80018f0:	08003d5c 	.word	0x08003d5c
 80018f4:	08003d6c 	.word	0x08003d6c
 80018f8:	003d0900 	.word	0x003d0900

080018fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001900:	4b02      	ldr	r3, [pc, #8]	@ (800190c <HAL_RCC_GetHCLKFreq+0x10>)
 8001902:	681b      	ldr	r3, [r3, #0]
}
 8001904:	4618      	mov	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr
 800190c:	20000004 	.word	0x20000004

08001910 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001914:	f7ff fff2 	bl	80018fc <HAL_RCC_GetHCLKFreq>
 8001918:	4602      	mov	r2, r0
 800191a:	4b05      	ldr	r3, [pc, #20]	@ (8001930 <HAL_RCC_GetPCLK1Freq+0x20>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	0a1b      	lsrs	r3, r3, #8
 8001920:	f003 0307 	and.w	r3, r3, #7
 8001924:	4903      	ldr	r1, [pc, #12]	@ (8001934 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001926:	5ccb      	ldrb	r3, [r1, r3]
 8001928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800192c:	4618      	mov	r0, r3
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40021000 	.word	0x40021000
 8001934:	08003d54 	.word	0x08003d54

08001938 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800193c:	f7ff ffde 	bl	80018fc <HAL_RCC_GetHCLKFreq>
 8001940:	4602      	mov	r2, r0
 8001942:	4b05      	ldr	r3, [pc, #20]	@ (8001958 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	0adb      	lsrs	r3, r3, #11
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	4903      	ldr	r1, [pc, #12]	@ (800195c <HAL_RCC_GetPCLK2Freq+0x24>)
 800194e:	5ccb      	ldrb	r3, [r1, r3]
 8001950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001954:	4618      	mov	r0, r3
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40021000 	.word	0x40021000
 800195c:	08003d54 	.word	0x08003d54

08001960 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001968:	4b0a      	ldr	r3, [pc, #40]	@ (8001994 <RCC_Delay+0x34>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a0a      	ldr	r2, [pc, #40]	@ (8001998 <RCC_Delay+0x38>)
 800196e:	fba2 2303 	umull	r2, r3, r2, r3
 8001972:	0a5b      	lsrs	r3, r3, #9
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	fb02 f303 	mul.w	r3, r2, r3
 800197a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800197c:	bf00      	nop
  }
  while (Delay --);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	1e5a      	subs	r2, r3, #1
 8001982:	60fa      	str	r2, [r7, #12]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1f9      	bne.n	800197c <RCC_Delay+0x1c>
}
 8001988:	bf00      	nop
 800198a:	bf00      	nop
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr
 8001994:	20000004 	.word	0x20000004
 8001998:	10624dd3 	.word	0x10624dd3

0800199c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e041      	b.n	8001a32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d106      	bne.n	80019c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7fe ff24 	bl	8000810 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2202      	movs	r2, #2
 80019cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3304      	adds	r3, #4
 80019d8:	4619      	mov	r1, r3
 80019da:	4610      	mov	r0, r2
 80019dc:	f000 fa74 	bl	8001ec8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
	...

08001a3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d001      	beq.n	8001a54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e03a      	b.n	8001aca <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2202      	movs	r2, #2
 8001a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	68da      	ldr	r2, [r3, #12]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f042 0201 	orr.w	r2, r2, #1
 8001a6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a18      	ldr	r2, [pc, #96]	@ (8001ad4 <HAL_TIM_Base_Start_IT+0x98>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d00e      	beq.n	8001a94 <HAL_TIM_Base_Start_IT+0x58>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a7e:	d009      	beq.n	8001a94 <HAL_TIM_Base_Start_IT+0x58>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a14      	ldr	r2, [pc, #80]	@ (8001ad8 <HAL_TIM_Base_Start_IT+0x9c>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d004      	beq.n	8001a94 <HAL_TIM_Base_Start_IT+0x58>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a13      	ldr	r2, [pc, #76]	@ (8001adc <HAL_TIM_Base_Start_IT+0xa0>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d111      	bne.n	8001ab8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2b06      	cmp	r3, #6
 8001aa4:	d010      	beq.n	8001ac8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f042 0201 	orr.w	r2, r2, #1
 8001ab4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ab6:	e007      	b.n	8001ac8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f042 0201 	orr.w	r2, r2, #1
 8001ac6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3714      	adds	r7, #20
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr
 8001ad4:	40012c00 	.word	0x40012c00
 8001ad8:	40000400 	.word	0x40000400
 8001adc:	40000800 	.word	0x40000800

08001ae0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d122      	bne.n	8001b3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d11b      	bne.n	8001b3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f06f 0202 	mvn.w	r2, #2
 8001b0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	f003 0303 	and.w	r3, r3, #3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 f9b4 	bl	8001e90 <HAL_TIM_IC_CaptureCallback>
 8001b28:	e005      	b.n	8001b36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f000 f9a7 	bl	8001e7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 f9b6 	bl	8001ea2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	f003 0304 	and.w	r3, r3, #4
 8001b46:	2b04      	cmp	r3, #4
 8001b48:	d122      	bne.n	8001b90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	2b04      	cmp	r3, #4
 8001b56:	d11b      	bne.n	8001b90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f06f 0204 	mvn.w	r2, #4
 8001b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2202      	movs	r2, #2
 8001b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 f98a 	bl	8001e90 <HAL_TIM_IC_CaptureCallback>
 8001b7c:	e005      	b.n	8001b8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f000 f97d 	bl	8001e7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 f98c 	bl	8001ea2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	f003 0308 	and.w	r3, r3, #8
 8001b9a:	2b08      	cmp	r3, #8
 8001b9c:	d122      	bne.n	8001be4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	f003 0308 	and.w	r3, r3, #8
 8001ba8:	2b08      	cmp	r3, #8
 8001baa:	d11b      	bne.n	8001be4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f06f 0208 	mvn.w	r2, #8
 8001bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2204      	movs	r2, #4
 8001bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	f003 0303 	and.w	r3, r3, #3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 f960 	bl	8001e90 <HAL_TIM_IC_CaptureCallback>
 8001bd0:	e005      	b.n	8001bde <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 f953 	bl	8001e7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 f962 	bl	8001ea2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	f003 0310 	and.w	r3, r3, #16
 8001bee:	2b10      	cmp	r3, #16
 8001bf0:	d122      	bne.n	8001c38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	f003 0310 	and.w	r3, r3, #16
 8001bfc:	2b10      	cmp	r3, #16
 8001bfe:	d11b      	bne.n	8001c38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f06f 0210 	mvn.w	r2, #16
 8001c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2208      	movs	r2, #8
 8001c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f936 	bl	8001e90 <HAL_TIM_IC_CaptureCallback>
 8001c24:	e005      	b.n	8001c32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 f929 	bl	8001e7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f000 f938 	bl	8001ea2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d10e      	bne.n	8001c64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d107      	bne.n	8001c64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f06f 0201 	mvn.w	r2, #1
 8001c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7fe fc56 	bl	8000510 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c6e:	2b80      	cmp	r3, #128	@ 0x80
 8001c70:	d10e      	bne.n	8001c90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c7c:	2b80      	cmp	r3, #128	@ 0x80
 8001c7e:	d107      	bne.n	8001c90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 fa7b 	bl	8002186 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c9a:	2b40      	cmp	r3, #64	@ 0x40
 8001c9c:	d10e      	bne.n	8001cbc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ca8:	2b40      	cmp	r3, #64	@ 0x40
 8001caa:	d107      	bne.n	8001cbc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 f8fc 	bl	8001eb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	f003 0320 	and.w	r3, r3, #32
 8001cc6:	2b20      	cmp	r3, #32
 8001cc8:	d10e      	bne.n	8001ce8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	f003 0320 	and.w	r3, r3, #32
 8001cd4:	2b20      	cmp	r3, #32
 8001cd6:	d107      	bne.n	8001ce8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f06f 0220 	mvn.w	r2, #32
 8001ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 fa46 	bl	8002174 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ce8:	bf00      	nop
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d101      	bne.n	8001d0c <HAL_TIM_ConfigClockSource+0x1c>
 8001d08:	2302      	movs	r3, #2
 8001d0a:	e0b4      	b.n	8001e76 <HAL_TIM_ConfigClockSource+0x186>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2202      	movs	r2, #2
 8001d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001d2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001d32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68ba      	ldr	r2, [r7, #8]
 8001d3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d44:	d03e      	beq.n	8001dc4 <HAL_TIM_ConfigClockSource+0xd4>
 8001d46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d4a:	f200 8087 	bhi.w	8001e5c <HAL_TIM_ConfigClockSource+0x16c>
 8001d4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d52:	f000 8086 	beq.w	8001e62 <HAL_TIM_ConfigClockSource+0x172>
 8001d56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d5a:	d87f      	bhi.n	8001e5c <HAL_TIM_ConfigClockSource+0x16c>
 8001d5c:	2b70      	cmp	r3, #112	@ 0x70
 8001d5e:	d01a      	beq.n	8001d96 <HAL_TIM_ConfigClockSource+0xa6>
 8001d60:	2b70      	cmp	r3, #112	@ 0x70
 8001d62:	d87b      	bhi.n	8001e5c <HAL_TIM_ConfigClockSource+0x16c>
 8001d64:	2b60      	cmp	r3, #96	@ 0x60
 8001d66:	d050      	beq.n	8001e0a <HAL_TIM_ConfigClockSource+0x11a>
 8001d68:	2b60      	cmp	r3, #96	@ 0x60
 8001d6a:	d877      	bhi.n	8001e5c <HAL_TIM_ConfigClockSource+0x16c>
 8001d6c:	2b50      	cmp	r3, #80	@ 0x50
 8001d6e:	d03c      	beq.n	8001dea <HAL_TIM_ConfigClockSource+0xfa>
 8001d70:	2b50      	cmp	r3, #80	@ 0x50
 8001d72:	d873      	bhi.n	8001e5c <HAL_TIM_ConfigClockSource+0x16c>
 8001d74:	2b40      	cmp	r3, #64	@ 0x40
 8001d76:	d058      	beq.n	8001e2a <HAL_TIM_ConfigClockSource+0x13a>
 8001d78:	2b40      	cmp	r3, #64	@ 0x40
 8001d7a:	d86f      	bhi.n	8001e5c <HAL_TIM_ConfigClockSource+0x16c>
 8001d7c:	2b30      	cmp	r3, #48	@ 0x30
 8001d7e:	d064      	beq.n	8001e4a <HAL_TIM_ConfigClockSource+0x15a>
 8001d80:	2b30      	cmp	r3, #48	@ 0x30
 8001d82:	d86b      	bhi.n	8001e5c <HAL_TIM_ConfigClockSource+0x16c>
 8001d84:	2b20      	cmp	r3, #32
 8001d86:	d060      	beq.n	8001e4a <HAL_TIM_ConfigClockSource+0x15a>
 8001d88:	2b20      	cmp	r3, #32
 8001d8a:	d867      	bhi.n	8001e5c <HAL_TIM_ConfigClockSource+0x16c>
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d05c      	beq.n	8001e4a <HAL_TIM_ConfigClockSource+0x15a>
 8001d90:	2b10      	cmp	r3, #16
 8001d92:	d05a      	beq.n	8001e4a <HAL_TIM_ConfigClockSource+0x15a>
 8001d94:	e062      	b.n	8001e5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001da6:	f000 f968 	bl	800207a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001db8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	609a      	str	r2, [r3, #8]
      break;
 8001dc2:	e04f      	b.n	8001e64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001dd4:	f000 f951 	bl	800207a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	689a      	ldr	r2, [r3, #8]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001de6:	609a      	str	r2, [r3, #8]
      break;
 8001de8:	e03c      	b.n	8001e64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001df6:	461a      	mov	r2, r3
 8001df8:	f000 f8c8 	bl	8001f8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2150      	movs	r1, #80	@ 0x50
 8001e02:	4618      	mov	r0, r3
 8001e04:	f000 f91f 	bl	8002046 <TIM_ITRx_SetConfig>
      break;
 8001e08:	e02c      	b.n	8001e64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e16:	461a      	mov	r2, r3
 8001e18:	f000 f8e6 	bl	8001fe8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2160      	movs	r1, #96	@ 0x60
 8001e22:	4618      	mov	r0, r3
 8001e24:	f000 f90f 	bl	8002046 <TIM_ITRx_SetConfig>
      break;
 8001e28:	e01c      	b.n	8001e64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e36:	461a      	mov	r2, r3
 8001e38:	f000 f8a8 	bl	8001f8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2140      	movs	r1, #64	@ 0x40
 8001e42:	4618      	mov	r0, r3
 8001e44:	f000 f8ff 	bl	8002046 <TIM_ITRx_SetConfig>
      break;
 8001e48:	e00c      	b.n	8001e64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4619      	mov	r1, r3
 8001e54:	4610      	mov	r0, r2
 8001e56:	f000 f8f6 	bl	8002046 <TIM_ITRx_SetConfig>
      break;
 8001e5a:	e003      	b.n	8001e64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	73fb      	strb	r3, [r7, #15]
      break;
 8001e60:	e000      	b.n	8001e64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001e62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr

08001e90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bc80      	pop	{r7}
 8001ea0:	4770      	bx	lr

08001ea2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr

08001eb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bc80      	pop	{r7}
 8001ec4:	4770      	bx	lr
	...

08001ec8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a29      	ldr	r2, [pc, #164]	@ (8001f80 <TIM_Base_SetConfig+0xb8>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d00b      	beq.n	8001ef8 <TIM_Base_SetConfig+0x30>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ee6:	d007      	beq.n	8001ef8 <TIM_Base_SetConfig+0x30>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a26      	ldr	r2, [pc, #152]	@ (8001f84 <TIM_Base_SetConfig+0xbc>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d003      	beq.n	8001ef8 <TIM_Base_SetConfig+0x30>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a25      	ldr	r2, [pc, #148]	@ (8001f88 <TIM_Base_SetConfig+0xc0>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d108      	bne.n	8001f0a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001efe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a1c      	ldr	r2, [pc, #112]	@ (8001f80 <TIM_Base_SetConfig+0xb8>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d00b      	beq.n	8001f2a <TIM_Base_SetConfig+0x62>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f18:	d007      	beq.n	8001f2a <TIM_Base_SetConfig+0x62>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a19      	ldr	r2, [pc, #100]	@ (8001f84 <TIM_Base_SetConfig+0xbc>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d003      	beq.n	8001f2a <TIM_Base_SetConfig+0x62>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a18      	ldr	r2, [pc, #96]	@ (8001f88 <TIM_Base_SetConfig+0xc0>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d108      	bne.n	8001f3c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a07      	ldr	r2, [pc, #28]	@ (8001f80 <TIM_Base_SetConfig+0xb8>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d103      	bne.n	8001f70 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	691a      	ldr	r2, [r3, #16]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	615a      	str	r2, [r3, #20]
}
 8001f76:	bf00      	nop
 8001f78:	3714      	adds	r7, #20
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr
 8001f80:	40012c00 	.word	0x40012c00
 8001f84:	40000400 	.word	0x40000400
 8001f88:	40000800 	.word	0x40000800

08001f8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b087      	sub	sp, #28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
 8001fa2:	f023 0201 	bic.w	r2, r3, #1
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001fb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	011b      	lsls	r3, r3, #4
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	f023 030a 	bic.w	r3, r3, #10
 8001fc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	621a      	str	r2, [r3, #32]
}
 8001fde:	bf00      	nop
 8001fe0:	371c      	adds	r7, #28
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr

08001fe8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b087      	sub	sp, #28
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	f023 0210 	bic.w	r2, r3, #16
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002012:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	031b      	lsls	r3, r3, #12
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	4313      	orrs	r3, r2
 800201c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002024:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	011b      	lsls	r3, r3, #4
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	4313      	orrs	r3, r2
 800202e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	697a      	ldr	r2, [r7, #20]
 800203a:	621a      	str	r2, [r3, #32]
}
 800203c:	bf00      	nop
 800203e:	371c      	adds	r7, #28
 8002040:	46bd      	mov	sp, r7
 8002042:	bc80      	pop	{r7}
 8002044:	4770      	bx	lr

08002046 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002046:	b480      	push	{r7}
 8002048:	b085      	sub	sp, #20
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
 800204e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800205c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	4313      	orrs	r3, r2
 8002064:	f043 0307 	orr.w	r3, r3, #7
 8002068:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	609a      	str	r2, [r3, #8]
}
 8002070:	bf00      	nop
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	bc80      	pop	{r7}
 8002078:	4770      	bx	lr

0800207a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800207a:	b480      	push	{r7}
 800207c:	b087      	sub	sp, #28
 800207e:	af00      	add	r7, sp, #0
 8002080:	60f8      	str	r0, [r7, #12]
 8002082:	60b9      	str	r1, [r7, #8]
 8002084:	607a      	str	r2, [r7, #4]
 8002086:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002094:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	021a      	lsls	r2, r3, #8
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	431a      	orrs	r2, r3
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	697a      	ldr	r2, [r7, #20]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	609a      	str	r2, [r3, #8]
}
 80020ae:	bf00      	nop
 80020b0:	371c      	adds	r7, #28
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr

080020b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d101      	bne.n	80020d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80020cc:	2302      	movs	r3, #2
 80020ce:	e046      	b.n	800215e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2202      	movs	r2, #2
 80020dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	4313      	orrs	r3, r2
 8002100:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a16      	ldr	r2, [pc, #88]	@ (8002168 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d00e      	beq.n	8002132 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800211c:	d009      	beq.n	8002132 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a12      	ldr	r2, [pc, #72]	@ (800216c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d004      	beq.n	8002132 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a10      	ldr	r2, [pc, #64]	@ (8002170 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d10c      	bne.n	800214c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002138:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	68ba      	ldr	r2, [r7, #8]
 8002140:	4313      	orrs	r3, r2
 8002142:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68ba      	ldr	r2, [r7, #8]
 800214a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr
 8002168:	40012c00 	.word	0x40012c00
 800216c:	40000400 	.word	0x40000400
 8002170:	40000800 	.word	0x40000800

08002174 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	bc80      	pop	{r7}
 8002184:	4770      	bx	lr

08002186 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr

08002198 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e042      	b.n	8002230 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d106      	bne.n	80021c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7fe fb74 	bl	80008ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2224      	movs	r2, #36	@ 0x24
 80021c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68da      	ldr	r2, [r3, #12]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80021da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f000 fdc5 	bl	8002d6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	691a      	ldr	r2, [r3, #16]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80021f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	695a      	ldr	r2, [r3, #20]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002200:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68da      	ldr	r2, [r3, #12]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002210:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2220      	movs	r2, #32
 800221c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2220      	movs	r2, #32
 8002224:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b08a      	sub	sp, #40	@ 0x28
 800223c:	af02      	add	r7, sp, #8
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	603b      	str	r3, [r7, #0]
 8002244:	4613      	mov	r3, r2
 8002246:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b20      	cmp	r3, #32
 8002256:	d16d      	bne.n	8002334 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d002      	beq.n	8002264 <HAL_UART_Transmit+0x2c>
 800225e:	88fb      	ldrh	r3, [r7, #6]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e066      	b.n	8002336 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2221      	movs	r2, #33	@ 0x21
 8002272:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002276:	f7fe fbeb 	bl	8000a50 <HAL_GetTick>
 800227a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	88fa      	ldrh	r2, [r7, #6]
 8002280:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	88fa      	ldrh	r2, [r7, #6]
 8002286:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002290:	d108      	bne.n	80022a4 <HAL_UART_Transmit+0x6c>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d104      	bne.n	80022a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800229a:	2300      	movs	r3, #0
 800229c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	61bb      	str	r3, [r7, #24]
 80022a2:	e003      	b.n	80022ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022a8:	2300      	movs	r3, #0
 80022aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80022ac:	e02a      	b.n	8002304 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	2200      	movs	r2, #0
 80022b6:	2180      	movs	r1, #128	@ 0x80
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f000 fb14 	bl	80028e6 <UART_WaitOnFlagUntilTimeout>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e036      	b.n	8002336 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10b      	bne.n	80022e6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	881b      	ldrh	r3, [r3, #0]
 80022d2:	461a      	mov	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	3302      	adds	r3, #2
 80022e2:	61bb      	str	r3, [r7, #24]
 80022e4:	e007      	b.n	80022f6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	781a      	ldrb	r2, [r3, #0]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	3301      	adds	r3, #1
 80022f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	3b01      	subs	r3, #1
 80022fe:	b29a      	uxth	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002308:	b29b      	uxth	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1cf      	bne.n	80022ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	2200      	movs	r2, #0
 8002316:	2140      	movs	r1, #64	@ 0x40
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f000 fae4 	bl	80028e6 <UART_WaitOnFlagUntilTimeout>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e006      	b.n	8002336 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2220      	movs	r2, #32
 800232c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002330:	2300      	movs	r3, #0
 8002332:	e000      	b.n	8002336 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002334:	2302      	movs	r3, #2
  }
}
 8002336:	4618      	mov	r0, r3
 8002338:	3720      	adds	r7, #32
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b084      	sub	sp, #16
 8002342:	af00      	add	r7, sp, #0
 8002344:	60f8      	str	r0, [r7, #12]
 8002346:	60b9      	str	r1, [r7, #8]
 8002348:	4613      	mov	r3, r2
 800234a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b20      	cmp	r3, #32
 8002356:	d112      	bne.n	800237e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d002      	beq.n	8002364 <HAL_UART_Receive_IT+0x26>
 800235e:	88fb      	ldrh	r3, [r7, #6]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e00b      	b.n	8002380 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800236e:	88fb      	ldrh	r3, [r7, #6]
 8002370:	461a      	mov	r2, r3
 8002372:	68b9      	ldr	r1, [r7, #8]
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	f000 fb24 	bl	80029c2 <UART_Start_Receive_IT>
 800237a:	4603      	mov	r3, r0
 800237c:	e000      	b.n	8002380 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800237e:	2302      	movs	r3, #2
  }
}
 8002380:	4618      	mov	r0, r3
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b0ba      	sub	sp, #232	@ 0xe8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80023ae:	2300      	movs	r3, #0
 80023b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80023ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80023c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10f      	bne.n	80023ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023d2:	f003 0320 	and.w	r3, r3, #32
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d009      	beq.n	80023ee <HAL_UART_IRQHandler+0x66>
 80023da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80023de:	f003 0320 	and.w	r3, r3, #32
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d003      	beq.n	80023ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 fc01 	bl	8002bee <UART_Receive_IT>
      return;
 80023ec:	e25b      	b.n	80028a6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80023ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 80de 	beq.w	80025b4 <HAL_UART_IRQHandler+0x22c>
 80023f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	2b00      	cmp	r3, #0
 8002402:	d106      	bne.n	8002412 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002408:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 80d1 	beq.w	80025b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00b      	beq.n	8002436 <HAL_UART_IRQHandler+0xae>
 800241e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002422:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002426:	2b00      	cmp	r3, #0
 8002428:	d005      	beq.n	8002436 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800242e:	f043 0201 	orr.w	r2, r3, #1
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800243a:	f003 0304 	and.w	r3, r3, #4
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00b      	beq.n	800245a <HAL_UART_IRQHandler+0xd2>
 8002442:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b00      	cmp	r3, #0
 800244c:	d005      	beq.n	800245a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002452:	f043 0202 	orr.w	r2, r3, #2
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800245a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00b      	beq.n	800247e <HAL_UART_IRQHandler+0xf6>
 8002466:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d005      	beq.n	800247e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002476:	f043 0204 	orr.w	r2, r3, #4
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800247e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002482:	f003 0308 	and.w	r3, r3, #8
 8002486:	2b00      	cmp	r3, #0
 8002488:	d011      	beq.n	80024ae <HAL_UART_IRQHandler+0x126>
 800248a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800248e:	f003 0320 	and.w	r3, r3, #32
 8002492:	2b00      	cmp	r3, #0
 8002494:	d105      	bne.n	80024a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002496:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d005      	beq.n	80024ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024a6:	f043 0208 	orr.w	r2, r3, #8
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f000 81f2 	beq.w	800289c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024bc:	f003 0320 	and.w	r3, r3, #32
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d008      	beq.n	80024d6 <HAL_UART_IRQHandler+0x14e>
 80024c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024c8:	f003 0320 	and.w	r3, r3, #32
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d002      	beq.n	80024d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 fb8c 	bl	8002bee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	bf14      	ite	ne
 80024e4:	2301      	movne	r3, #1
 80024e6:	2300      	moveq	r3, #0
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f2:	f003 0308 	and.w	r3, r3, #8
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d103      	bne.n	8002502 <HAL_UART_IRQHandler+0x17a>
 80024fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d04f      	beq.n	80025a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 fa96 	bl	8002a34 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002512:	2b00      	cmp	r3, #0
 8002514:	d041      	beq.n	800259a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	3314      	adds	r3, #20
 800251c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002520:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002524:	e853 3f00 	ldrex	r3, [r3]
 8002528:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800252c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002530:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002534:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	3314      	adds	r3, #20
 800253e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002542:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002546:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800254a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800254e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002552:	e841 2300 	strex	r3, r2, [r1]
 8002556:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800255a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1d9      	bne.n	8002516 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002566:	2b00      	cmp	r3, #0
 8002568:	d013      	beq.n	8002592 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800256e:	4a7e      	ldr	r2, [pc, #504]	@ (8002768 <HAL_UART_IRQHandler+0x3e0>)
 8002570:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002576:	4618      	mov	r0, r3
 8002578:	f7fe fbbc 	bl	8000cf4 <HAL_DMA_Abort_IT>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d016      	beq.n	80025b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002586:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800258c:	4610      	mov	r0, r2
 800258e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002590:	e00e      	b.n	80025b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 f993 	bl	80028be <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002598:	e00a      	b.n	80025b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 f98f 	bl	80028be <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025a0:	e006      	b.n	80025b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 f98b 	bl	80028be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80025ae:	e175      	b.n	800289c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025b0:	bf00      	nop
    return;
 80025b2:	e173      	b.n	800289c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	f040 814f 	bne.w	800285c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80025be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025c2:	f003 0310 	and.w	r3, r3, #16
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f000 8148 	beq.w	800285c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80025cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025d0:	f003 0310 	and.w	r3, r3, #16
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f000 8141 	beq.w	800285c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80025da:	2300      	movs	r3, #0
 80025dc:	60bb      	str	r3, [r7, #8]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	60bb      	str	r3, [r7, #8]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	60bb      	str	r3, [r7, #8]
 80025ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f000 80b6 	beq.w	800276c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800260c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 8145 	beq.w	80028a0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800261a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800261e:	429a      	cmp	r2, r3
 8002620:	f080 813e 	bcs.w	80028a0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800262a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	2b20      	cmp	r3, #32
 8002634:	f000 8088 	beq.w	8002748 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	330c      	adds	r3, #12
 800263e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002642:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002646:	e853 3f00 	ldrex	r3, [r3]
 800264a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800264e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002652:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002656:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	330c      	adds	r3, #12
 8002660:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002664:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002668:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800266c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002670:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002674:	e841 2300 	strex	r3, r2, [r1]
 8002678:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800267c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1d9      	bne.n	8002638 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	3314      	adds	r3, #20
 800268a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800268c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800268e:	e853 3f00 	ldrex	r3, [r3]
 8002692:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002694:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002696:	f023 0301 	bic.w	r3, r3, #1
 800269a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	3314      	adds	r3, #20
 80026a4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80026a8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80026ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026ae:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80026b0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80026b4:	e841 2300 	strex	r3, r2, [r1]
 80026b8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80026ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1e1      	bne.n	8002684 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	3314      	adds	r3, #20
 80026c6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80026ca:	e853 3f00 	ldrex	r3, [r3]
 80026ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80026d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80026d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	3314      	adds	r3, #20
 80026e0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80026e4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80026e6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026e8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80026ea:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80026ec:	e841 2300 	strex	r3, r2, [r1]
 80026f0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80026f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1e3      	bne.n	80026c0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2220      	movs	r2, #32
 80026fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	330c      	adds	r3, #12
 800270c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800270e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002710:	e853 3f00 	ldrex	r3, [r3]
 8002714:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002716:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002718:	f023 0310 	bic.w	r3, r3, #16
 800271c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	330c      	adds	r3, #12
 8002726:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800272a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800272c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800272e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002730:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002732:	e841 2300 	strex	r3, r2, [r1]
 8002736:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002738:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1e3      	bne.n	8002706 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002742:	4618      	mov	r0, r3
 8002744:	f7fe fa9b 	bl	8000c7e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2202      	movs	r2, #2
 800274c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002756:	b29b      	uxth	r3, r3
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	b29b      	uxth	r3, r3
 800275c:	4619      	mov	r1, r3
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f8b6 	bl	80028d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002764:	e09c      	b.n	80028a0 <HAL_UART_IRQHandler+0x518>
 8002766:	bf00      	nop
 8002768:	08002af9 	.word	0x08002af9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002774:	b29b      	uxth	r3, r3
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002780:	b29b      	uxth	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	f000 808e 	beq.w	80028a4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002788:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800278c:	2b00      	cmp	r3, #0
 800278e:	f000 8089 	beq.w	80028a4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	330c      	adds	r3, #12
 8002798:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800279a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800279c:	e853 3f00 	ldrex	r3, [r3]
 80027a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80027a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80027a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	330c      	adds	r3, #12
 80027b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80027b6:	647a      	str	r2, [r7, #68]	@ 0x44
 80027b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80027bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80027be:	e841 2300 	strex	r3, r2, [r1]
 80027c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80027c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1e3      	bne.n	8002792 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	3314      	adds	r3, #20
 80027d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d4:	e853 3f00 	ldrex	r3, [r3]
 80027d8:	623b      	str	r3, [r7, #32]
   return(result);
 80027da:	6a3b      	ldr	r3, [r7, #32]
 80027dc:	f023 0301 	bic.w	r3, r3, #1
 80027e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	3314      	adds	r3, #20
 80027ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80027ee:	633a      	str	r2, [r7, #48]	@ 0x30
 80027f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80027f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027f6:	e841 2300 	strex	r3, r2, [r1]
 80027fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80027fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1e3      	bne.n	80027ca <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2220      	movs	r2, #32
 8002806:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	330c      	adds	r3, #12
 8002816:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	e853 3f00 	ldrex	r3, [r3]
 800281e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f023 0310 	bic.w	r3, r3, #16
 8002826:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	330c      	adds	r3, #12
 8002830:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002834:	61fa      	str	r2, [r7, #28]
 8002836:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002838:	69b9      	ldr	r1, [r7, #24]
 800283a:	69fa      	ldr	r2, [r7, #28]
 800283c:	e841 2300 	strex	r3, r2, [r1]
 8002840:	617b      	str	r3, [r7, #20]
   return(result);
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1e3      	bne.n	8002810 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2202      	movs	r2, #2
 800284c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800284e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002852:	4619      	mov	r1, r3
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 f83b 	bl	80028d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800285a:	e023      	b.n	80028a4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800285c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002860:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002864:	2b00      	cmp	r3, #0
 8002866:	d009      	beq.n	800287c <HAL_UART_IRQHandler+0x4f4>
 8002868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800286c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002870:	2b00      	cmp	r3, #0
 8002872:	d003      	beq.n	800287c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f000 f953 	bl	8002b20 <UART_Transmit_IT>
    return;
 800287a:	e014      	b.n	80028a6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800287c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00e      	beq.n	80028a6 <HAL_UART_IRQHandler+0x51e>
 8002888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800288c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002890:	2b00      	cmp	r3, #0
 8002892:	d008      	beq.n	80028a6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 f992 	bl	8002bbe <UART_EndTransmit_IT>
    return;
 800289a:	e004      	b.n	80028a6 <HAL_UART_IRQHandler+0x51e>
    return;
 800289c:	bf00      	nop
 800289e:	e002      	b.n	80028a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80028a0:	bf00      	nop
 80028a2:	e000      	b.n	80028a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80028a4:	bf00      	nop
  }
}
 80028a6:	37e8      	adds	r7, #232	@ 0xe8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr

080028be <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80028be:	b480      	push	{r7}
 80028c0:	b083      	sub	sp, #12
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80028c6:	bf00      	nop
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bc80      	pop	{r7}
 80028ce:	4770      	bx	lr

080028d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	460b      	mov	r3, r1
 80028da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bc80      	pop	{r7}
 80028e4:	4770      	bx	lr

080028e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b090      	sub	sp, #64	@ 0x40
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	60f8      	str	r0, [r7, #12]
 80028ee:	60b9      	str	r1, [r7, #8]
 80028f0:	603b      	str	r3, [r7, #0]
 80028f2:	4613      	mov	r3, r2
 80028f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028f6:	e050      	b.n	800299a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028fe:	d04c      	beq.n	800299a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002900:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002902:	2b00      	cmp	r3, #0
 8002904:	d007      	beq.n	8002916 <UART_WaitOnFlagUntilTimeout+0x30>
 8002906:	f7fe f8a3 	bl	8000a50 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002912:	429a      	cmp	r2, r3
 8002914:	d241      	bcs.n	800299a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	330c      	adds	r3, #12
 800291c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800291e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002920:	e853 3f00 	ldrex	r3, [r3]
 8002924:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002928:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800292c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	330c      	adds	r3, #12
 8002934:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002936:	637a      	str	r2, [r7, #52]	@ 0x34
 8002938:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800293a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800293c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800293e:	e841 2300 	strex	r3, r2, [r1]
 8002942:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8002944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1e5      	bne.n	8002916 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	3314      	adds	r3, #20
 8002950:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	e853 3f00 	ldrex	r3, [r3]
 8002958:	613b      	str	r3, [r7, #16]
   return(result);
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	f023 0301 	bic.w	r3, r3, #1
 8002960:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	3314      	adds	r3, #20
 8002968:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800296a:	623a      	str	r2, [r7, #32]
 800296c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800296e:	69f9      	ldr	r1, [r7, #28]
 8002970:	6a3a      	ldr	r2, [r7, #32]
 8002972:	e841 2300 	strex	r3, r2, [r1]
 8002976:	61bb      	str	r3, [r7, #24]
   return(result);
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1e5      	bne.n	800294a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2220      	movs	r2, #32
 8002982:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2220      	movs	r2, #32
 800298a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e00f      	b.n	80029ba <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	4013      	ands	r3, r2
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	bf0c      	ite	eq
 80029aa:	2301      	moveq	r3, #1
 80029ac:	2300      	movne	r3, #0
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	461a      	mov	r2, r3
 80029b2:	79fb      	ldrb	r3, [r7, #7]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d09f      	beq.n	80028f8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3740      	adds	r7, #64	@ 0x40
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b085      	sub	sp, #20
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	60f8      	str	r0, [r7, #12]
 80029ca:	60b9      	str	r1, [r7, #8]
 80029cc:	4613      	mov	r3, r2
 80029ce:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	88fa      	ldrh	r2, [r7, #6]
 80029da:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	88fa      	ldrh	r2, [r7, #6]
 80029e0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2222      	movs	r2, #34	@ 0x22
 80029ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d007      	beq.n	8002a08 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68da      	ldr	r2, [r3, #12]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a06:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	695a      	ldr	r2, [r3, #20]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 0201 	orr.w	r2, r2, #1
 8002a16:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f042 0220 	orr.w	r2, r2, #32
 8002a26:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr

08002a34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b095      	sub	sp, #84	@ 0x54
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	330c      	adds	r3, #12
 8002a42:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a46:	e853 3f00 	ldrex	r3, [r3]
 8002a4a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a4e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002a52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	330c      	adds	r3, #12
 8002a5a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a5c:	643a      	str	r2, [r7, #64]	@ 0x40
 8002a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a60:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002a62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002a64:	e841 2300 	strex	r3, r2, [r1]
 8002a68:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1e5      	bne.n	8002a3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	3314      	adds	r3, #20
 8002a76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a78:	6a3b      	ldr	r3, [r7, #32]
 8002a7a:	e853 3f00 	ldrex	r3, [r3]
 8002a7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	f023 0301 	bic.w	r3, r3, #1
 8002a86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	3314      	adds	r3, #20
 8002a8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002a90:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a92:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a98:	e841 2300 	strex	r3, r2, [r1]
 8002a9c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1e5      	bne.n	8002a70 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d119      	bne.n	8002ae0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	330c      	adds	r3, #12
 8002ab2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	e853 3f00 	ldrex	r3, [r3]
 8002aba:	60bb      	str	r3, [r7, #8]
   return(result);
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	f023 0310 	bic.w	r3, r3, #16
 8002ac2:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	330c      	adds	r3, #12
 8002aca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002acc:	61ba      	str	r2, [r7, #24]
 8002ace:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad0:	6979      	ldr	r1, [r7, #20]
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	e841 2300 	strex	r3, r2, [r1]
 8002ad8:	613b      	str	r3, [r7, #16]
   return(result);
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1e5      	bne.n	8002aac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002aee:	bf00      	nop
 8002af0:	3754      	adds	r7, #84	@ 0x54
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bc80      	pop	{r7}
 8002af6:	4770      	bx	lr

08002af8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b04:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f7ff fed3 	bl	80028be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b18:	bf00      	nop
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b21      	cmp	r3, #33	@ 0x21
 8002b32:	d13e      	bne.n	8002bb2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b3c:	d114      	bne.n	8002b68 <UART_Transmit_IT+0x48>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d110      	bne.n	8002b68 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	881b      	ldrh	r3, [r3, #0]
 8002b50:	461a      	mov	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b5a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	1c9a      	adds	r2, r3, #2
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	621a      	str	r2, [r3, #32]
 8002b66:	e008      	b.n	8002b7a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	1c59      	adds	r1, r3, #1
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6211      	str	r1, [r2, #32]
 8002b72:	781a      	ldrb	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	3b01      	subs	r3, #1
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	4619      	mov	r1, r3
 8002b88:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10f      	bne.n	8002bae <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68da      	ldr	r2, [r3, #12]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b9c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68da      	ldr	r2, [r3, #12]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002bac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	e000      	b.n	8002bb4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002bb2:	2302      	movs	r3, #2
  }
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bc80      	pop	{r7}
 8002bbc:	4770      	bx	lr

08002bbe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b082      	sub	sp, #8
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68da      	ldr	r2, [r3, #12]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002bd4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2220      	movs	r2, #32
 8002bda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7ff fe64 	bl	80028ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b08c      	sub	sp, #48	@ 0x30
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b22      	cmp	r3, #34	@ 0x22
 8002c00:	f040 80ae 	bne.w	8002d60 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c0c:	d117      	bne.n	8002c3e <UART_Receive_IT+0x50>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d113      	bne.n	8002c3e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002c16:	2300      	movs	r3, #0
 8002c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c30:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c36:	1c9a      	adds	r2, r3, #2
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c3c:	e026      	b.n	8002c8c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002c44:	2300      	movs	r3, #0
 8002c46:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c50:	d007      	beq.n	8002c62 <UART_Receive_IT+0x74>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10a      	bne.n	8002c70 <UART_Receive_IT+0x82>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d106      	bne.n	8002c70 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	b2da      	uxtb	r2, r3
 8002c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c6c:	701a      	strb	r2, [r3, #0]
 8002c6e:	e008      	b.n	8002c82 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c7c:	b2da      	uxtb	r2, r3
 8002c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c80:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c86:	1c5a      	adds	r2, r3, #1
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	3b01      	subs	r3, #1
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	4619      	mov	r1, r3
 8002c9a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d15d      	bne.n	8002d5c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68da      	ldr	r2, [r3, #12]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 0220 	bic.w	r2, r2, #32
 8002cae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68da      	ldr	r2, [r3, #12]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002cbe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	695a      	ldr	r2, [r3, #20]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 0201 	bic.w	r2, r2, #1
 8002cce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d135      	bne.n	8002d52 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	330c      	adds	r3, #12
 8002cf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	e853 3f00 	ldrex	r3, [r3]
 8002cfa:	613b      	str	r3, [r7, #16]
   return(result);
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	f023 0310 	bic.w	r3, r3, #16
 8002d02:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	330c      	adds	r3, #12
 8002d0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d0c:	623a      	str	r2, [r7, #32]
 8002d0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d10:	69f9      	ldr	r1, [r7, #28]
 8002d12:	6a3a      	ldr	r2, [r7, #32]
 8002d14:	e841 2300 	strex	r3, r2, [r1]
 8002d18:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1e5      	bne.n	8002cec <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0310 	and.w	r3, r3, #16
 8002d2a:	2b10      	cmp	r3, #16
 8002d2c:	d10a      	bne.n	8002d44 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60fb      	str	r3, [r7, #12]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	60fb      	str	r3, [r7, #12]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002d48:	4619      	mov	r1, r3
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7ff fdc0 	bl	80028d0 <HAL_UARTEx_RxEventCallback>
 8002d50:	e002      	b.n	8002d58 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7fd fbc4 	bl	80004e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	e002      	b.n	8002d62 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	e000      	b.n	8002d62 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002d60:	2302      	movs	r3, #2
  }
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3730      	adds	r7, #48	@ 0x30
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
	...

08002d6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68da      	ldr	r2, [r3, #12]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002da6:	f023 030c 	bic.w	r3, r3, #12
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	6812      	ldr	r2, [r2, #0]
 8002dae:	68b9      	ldr	r1, [r7, #8]
 8002db0:	430b      	orrs	r3, r1
 8002db2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	699a      	ldr	r2, [r3, #24]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a2c      	ldr	r2, [pc, #176]	@ (8002e80 <UART_SetConfig+0x114>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d103      	bne.n	8002ddc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002dd4:	f7fe fdb0 	bl	8001938 <HAL_RCC_GetPCLK2Freq>
 8002dd8:	60f8      	str	r0, [r7, #12]
 8002dda:	e002      	b.n	8002de2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ddc:	f7fe fd98 	bl	8001910 <HAL_RCC_GetPCLK1Freq>
 8002de0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	4613      	mov	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	009a      	lsls	r2, r3, #2
 8002dec:	441a      	add	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df8:	4a22      	ldr	r2, [pc, #136]	@ (8002e84 <UART_SetConfig+0x118>)
 8002dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfe:	095b      	lsrs	r3, r3, #5
 8002e00:	0119      	lsls	r1, r3, #4
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	4613      	mov	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4413      	add	r3, r2
 8002e0a:	009a      	lsls	r2, r3, #2
 8002e0c:	441a      	add	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e18:	4b1a      	ldr	r3, [pc, #104]	@ (8002e84 <UART_SetConfig+0x118>)
 8002e1a:	fba3 0302 	umull	r0, r3, r3, r2
 8002e1e:	095b      	lsrs	r3, r3, #5
 8002e20:	2064      	movs	r0, #100	@ 0x64
 8002e22:	fb00 f303 	mul.w	r3, r0, r3
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	011b      	lsls	r3, r3, #4
 8002e2a:	3332      	adds	r3, #50	@ 0x32
 8002e2c:	4a15      	ldr	r2, [pc, #84]	@ (8002e84 <UART_SetConfig+0x118>)
 8002e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e32:	095b      	lsrs	r3, r3, #5
 8002e34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e38:	4419      	add	r1, r3
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4413      	add	r3, r2
 8002e42:	009a      	lsls	r2, r3, #2
 8002e44:	441a      	add	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e50:	4b0c      	ldr	r3, [pc, #48]	@ (8002e84 <UART_SetConfig+0x118>)
 8002e52:	fba3 0302 	umull	r0, r3, r3, r2
 8002e56:	095b      	lsrs	r3, r3, #5
 8002e58:	2064      	movs	r0, #100	@ 0x64
 8002e5a:	fb00 f303 	mul.w	r3, r0, r3
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	011b      	lsls	r3, r3, #4
 8002e62:	3332      	adds	r3, #50	@ 0x32
 8002e64:	4a07      	ldr	r2, [pc, #28]	@ (8002e84 <UART_SetConfig+0x118>)
 8002e66:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6a:	095b      	lsrs	r3, r3, #5
 8002e6c:	f003 020f 	and.w	r2, r3, #15
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	440a      	add	r2, r1
 8002e76:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002e78:	bf00      	nop
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40013800 	.word	0x40013800
 8002e84:	51eb851f 	.word	0x51eb851f

08002e88 <std>:
 8002e88:	2300      	movs	r3, #0
 8002e8a:	b510      	push	{r4, lr}
 8002e8c:	4604      	mov	r4, r0
 8002e8e:	e9c0 3300 	strd	r3, r3, [r0]
 8002e92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002e96:	6083      	str	r3, [r0, #8]
 8002e98:	8181      	strh	r1, [r0, #12]
 8002e9a:	6643      	str	r3, [r0, #100]	@ 0x64
 8002e9c:	81c2      	strh	r2, [r0, #14]
 8002e9e:	6183      	str	r3, [r0, #24]
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	2208      	movs	r2, #8
 8002ea4:	305c      	adds	r0, #92	@ 0x5c
 8002ea6:	f000 f906 	bl	80030b6 <memset>
 8002eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8002ee0 <std+0x58>)
 8002eac:	6224      	str	r4, [r4, #32]
 8002eae:	6263      	str	r3, [r4, #36]	@ 0x24
 8002eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ee4 <std+0x5c>)
 8002eb2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ee8 <std+0x60>)
 8002eb6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8002eec <std+0x64>)
 8002eba:	6323      	str	r3, [r4, #48]	@ 0x30
 8002ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8002ef0 <std+0x68>)
 8002ebe:	429c      	cmp	r4, r3
 8002ec0:	d006      	beq.n	8002ed0 <std+0x48>
 8002ec2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002ec6:	4294      	cmp	r4, r2
 8002ec8:	d002      	beq.n	8002ed0 <std+0x48>
 8002eca:	33d0      	adds	r3, #208	@ 0xd0
 8002ecc:	429c      	cmp	r4, r3
 8002ece:	d105      	bne.n	8002edc <std+0x54>
 8002ed0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ed8:	f000 b966 	b.w	80031a8 <__retarget_lock_init_recursive>
 8002edc:	bd10      	pop	{r4, pc}
 8002ede:	bf00      	nop
 8002ee0:	08003031 	.word	0x08003031
 8002ee4:	08003053 	.word	0x08003053
 8002ee8:	0800308b 	.word	0x0800308b
 8002eec:	080030af 	.word	0x080030af
 8002ef0:	20000134 	.word	0x20000134

08002ef4 <stdio_exit_handler>:
 8002ef4:	4a02      	ldr	r2, [pc, #8]	@ (8002f00 <stdio_exit_handler+0xc>)
 8002ef6:	4903      	ldr	r1, [pc, #12]	@ (8002f04 <stdio_exit_handler+0x10>)
 8002ef8:	4803      	ldr	r0, [pc, #12]	@ (8002f08 <stdio_exit_handler+0x14>)
 8002efa:	f000 b869 	b.w	8002fd0 <_fwalk_sglue>
 8002efe:	bf00      	nop
 8002f00:	20000010 	.word	0x20000010
 8002f04:	08003a41 	.word	0x08003a41
 8002f08:	20000020 	.word	0x20000020

08002f0c <cleanup_stdio>:
 8002f0c:	6841      	ldr	r1, [r0, #4]
 8002f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8002f40 <cleanup_stdio+0x34>)
 8002f10:	b510      	push	{r4, lr}
 8002f12:	4299      	cmp	r1, r3
 8002f14:	4604      	mov	r4, r0
 8002f16:	d001      	beq.n	8002f1c <cleanup_stdio+0x10>
 8002f18:	f000 fd92 	bl	8003a40 <_fflush_r>
 8002f1c:	68a1      	ldr	r1, [r4, #8]
 8002f1e:	4b09      	ldr	r3, [pc, #36]	@ (8002f44 <cleanup_stdio+0x38>)
 8002f20:	4299      	cmp	r1, r3
 8002f22:	d002      	beq.n	8002f2a <cleanup_stdio+0x1e>
 8002f24:	4620      	mov	r0, r4
 8002f26:	f000 fd8b 	bl	8003a40 <_fflush_r>
 8002f2a:	68e1      	ldr	r1, [r4, #12]
 8002f2c:	4b06      	ldr	r3, [pc, #24]	@ (8002f48 <cleanup_stdio+0x3c>)
 8002f2e:	4299      	cmp	r1, r3
 8002f30:	d004      	beq.n	8002f3c <cleanup_stdio+0x30>
 8002f32:	4620      	mov	r0, r4
 8002f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f38:	f000 bd82 	b.w	8003a40 <_fflush_r>
 8002f3c:	bd10      	pop	{r4, pc}
 8002f3e:	bf00      	nop
 8002f40:	20000134 	.word	0x20000134
 8002f44:	2000019c 	.word	0x2000019c
 8002f48:	20000204 	.word	0x20000204

08002f4c <global_stdio_init.part.0>:
 8002f4c:	b510      	push	{r4, lr}
 8002f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8002f7c <global_stdio_init.part.0+0x30>)
 8002f50:	4c0b      	ldr	r4, [pc, #44]	@ (8002f80 <global_stdio_init.part.0+0x34>)
 8002f52:	4a0c      	ldr	r2, [pc, #48]	@ (8002f84 <global_stdio_init.part.0+0x38>)
 8002f54:	4620      	mov	r0, r4
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	2104      	movs	r1, #4
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f7ff ff94 	bl	8002e88 <std>
 8002f60:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002f64:	2201      	movs	r2, #1
 8002f66:	2109      	movs	r1, #9
 8002f68:	f7ff ff8e 	bl	8002e88 <std>
 8002f6c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002f70:	2202      	movs	r2, #2
 8002f72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f76:	2112      	movs	r1, #18
 8002f78:	f7ff bf86 	b.w	8002e88 <std>
 8002f7c:	2000026c 	.word	0x2000026c
 8002f80:	20000134 	.word	0x20000134
 8002f84:	08002ef5 	.word	0x08002ef5

08002f88 <__sfp_lock_acquire>:
 8002f88:	4801      	ldr	r0, [pc, #4]	@ (8002f90 <__sfp_lock_acquire+0x8>)
 8002f8a:	f000 b90e 	b.w	80031aa <__retarget_lock_acquire_recursive>
 8002f8e:	bf00      	nop
 8002f90:	20000275 	.word	0x20000275

08002f94 <__sfp_lock_release>:
 8002f94:	4801      	ldr	r0, [pc, #4]	@ (8002f9c <__sfp_lock_release+0x8>)
 8002f96:	f000 b909 	b.w	80031ac <__retarget_lock_release_recursive>
 8002f9a:	bf00      	nop
 8002f9c:	20000275 	.word	0x20000275

08002fa0 <__sinit>:
 8002fa0:	b510      	push	{r4, lr}
 8002fa2:	4604      	mov	r4, r0
 8002fa4:	f7ff fff0 	bl	8002f88 <__sfp_lock_acquire>
 8002fa8:	6a23      	ldr	r3, [r4, #32]
 8002faa:	b11b      	cbz	r3, 8002fb4 <__sinit+0x14>
 8002fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fb0:	f7ff bff0 	b.w	8002f94 <__sfp_lock_release>
 8002fb4:	4b04      	ldr	r3, [pc, #16]	@ (8002fc8 <__sinit+0x28>)
 8002fb6:	6223      	str	r3, [r4, #32]
 8002fb8:	4b04      	ldr	r3, [pc, #16]	@ (8002fcc <__sinit+0x2c>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1f5      	bne.n	8002fac <__sinit+0xc>
 8002fc0:	f7ff ffc4 	bl	8002f4c <global_stdio_init.part.0>
 8002fc4:	e7f2      	b.n	8002fac <__sinit+0xc>
 8002fc6:	bf00      	nop
 8002fc8:	08002f0d 	.word	0x08002f0d
 8002fcc:	2000026c 	.word	0x2000026c

08002fd0 <_fwalk_sglue>:
 8002fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fd4:	4607      	mov	r7, r0
 8002fd6:	4688      	mov	r8, r1
 8002fd8:	4614      	mov	r4, r2
 8002fda:	2600      	movs	r6, #0
 8002fdc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002fe0:	f1b9 0901 	subs.w	r9, r9, #1
 8002fe4:	d505      	bpl.n	8002ff2 <_fwalk_sglue+0x22>
 8002fe6:	6824      	ldr	r4, [r4, #0]
 8002fe8:	2c00      	cmp	r4, #0
 8002fea:	d1f7      	bne.n	8002fdc <_fwalk_sglue+0xc>
 8002fec:	4630      	mov	r0, r6
 8002fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ff2:	89ab      	ldrh	r3, [r5, #12]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d907      	bls.n	8003008 <_fwalk_sglue+0x38>
 8002ff8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	d003      	beq.n	8003008 <_fwalk_sglue+0x38>
 8003000:	4629      	mov	r1, r5
 8003002:	4638      	mov	r0, r7
 8003004:	47c0      	blx	r8
 8003006:	4306      	orrs	r6, r0
 8003008:	3568      	adds	r5, #104	@ 0x68
 800300a:	e7e9      	b.n	8002fe0 <_fwalk_sglue+0x10>

0800300c <iprintf>:
 800300c:	b40f      	push	{r0, r1, r2, r3}
 800300e:	b507      	push	{r0, r1, r2, lr}
 8003010:	4906      	ldr	r1, [pc, #24]	@ (800302c <iprintf+0x20>)
 8003012:	ab04      	add	r3, sp, #16
 8003014:	6808      	ldr	r0, [r1, #0]
 8003016:	f853 2b04 	ldr.w	r2, [r3], #4
 800301a:	6881      	ldr	r1, [r0, #8]
 800301c:	9301      	str	r3, [sp, #4]
 800301e:	f000 f9e5 	bl	80033ec <_vfiprintf_r>
 8003022:	b003      	add	sp, #12
 8003024:	f85d eb04 	ldr.w	lr, [sp], #4
 8003028:	b004      	add	sp, #16
 800302a:	4770      	bx	lr
 800302c:	2000001c 	.word	0x2000001c

08003030 <__sread>:
 8003030:	b510      	push	{r4, lr}
 8003032:	460c      	mov	r4, r1
 8003034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003038:	f000 f868 	bl	800310c <_read_r>
 800303c:	2800      	cmp	r0, #0
 800303e:	bfab      	itete	ge
 8003040:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003042:	89a3      	ldrhlt	r3, [r4, #12]
 8003044:	181b      	addge	r3, r3, r0
 8003046:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800304a:	bfac      	ite	ge
 800304c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800304e:	81a3      	strhlt	r3, [r4, #12]
 8003050:	bd10      	pop	{r4, pc}

08003052 <__swrite>:
 8003052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003056:	461f      	mov	r7, r3
 8003058:	898b      	ldrh	r3, [r1, #12]
 800305a:	4605      	mov	r5, r0
 800305c:	05db      	lsls	r3, r3, #23
 800305e:	460c      	mov	r4, r1
 8003060:	4616      	mov	r6, r2
 8003062:	d505      	bpl.n	8003070 <__swrite+0x1e>
 8003064:	2302      	movs	r3, #2
 8003066:	2200      	movs	r2, #0
 8003068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800306c:	f000 f83c 	bl	80030e8 <_lseek_r>
 8003070:	89a3      	ldrh	r3, [r4, #12]
 8003072:	4632      	mov	r2, r6
 8003074:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003078:	81a3      	strh	r3, [r4, #12]
 800307a:	4628      	mov	r0, r5
 800307c:	463b      	mov	r3, r7
 800307e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003082:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003086:	f000 b853 	b.w	8003130 <_write_r>

0800308a <__sseek>:
 800308a:	b510      	push	{r4, lr}
 800308c:	460c      	mov	r4, r1
 800308e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003092:	f000 f829 	bl	80030e8 <_lseek_r>
 8003096:	1c43      	adds	r3, r0, #1
 8003098:	89a3      	ldrh	r3, [r4, #12]
 800309a:	bf15      	itete	ne
 800309c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800309e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80030a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80030a6:	81a3      	strheq	r3, [r4, #12]
 80030a8:	bf18      	it	ne
 80030aa:	81a3      	strhne	r3, [r4, #12]
 80030ac:	bd10      	pop	{r4, pc}

080030ae <__sclose>:
 80030ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030b2:	f000 b809 	b.w	80030c8 <_close_r>

080030b6 <memset>:
 80030b6:	4603      	mov	r3, r0
 80030b8:	4402      	add	r2, r0
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d100      	bne.n	80030c0 <memset+0xa>
 80030be:	4770      	bx	lr
 80030c0:	f803 1b01 	strb.w	r1, [r3], #1
 80030c4:	e7f9      	b.n	80030ba <memset+0x4>
	...

080030c8 <_close_r>:
 80030c8:	b538      	push	{r3, r4, r5, lr}
 80030ca:	2300      	movs	r3, #0
 80030cc:	4d05      	ldr	r5, [pc, #20]	@ (80030e4 <_close_r+0x1c>)
 80030ce:	4604      	mov	r4, r0
 80030d0:	4608      	mov	r0, r1
 80030d2:	602b      	str	r3, [r5, #0]
 80030d4:	f7fd fae3 	bl	800069e <_close>
 80030d8:	1c43      	adds	r3, r0, #1
 80030da:	d102      	bne.n	80030e2 <_close_r+0x1a>
 80030dc:	682b      	ldr	r3, [r5, #0]
 80030de:	b103      	cbz	r3, 80030e2 <_close_r+0x1a>
 80030e0:	6023      	str	r3, [r4, #0]
 80030e2:	bd38      	pop	{r3, r4, r5, pc}
 80030e4:	20000270 	.word	0x20000270

080030e8 <_lseek_r>:
 80030e8:	b538      	push	{r3, r4, r5, lr}
 80030ea:	4604      	mov	r4, r0
 80030ec:	4608      	mov	r0, r1
 80030ee:	4611      	mov	r1, r2
 80030f0:	2200      	movs	r2, #0
 80030f2:	4d05      	ldr	r5, [pc, #20]	@ (8003108 <_lseek_r+0x20>)
 80030f4:	602a      	str	r2, [r5, #0]
 80030f6:	461a      	mov	r2, r3
 80030f8:	f7fd faf5 	bl	80006e6 <_lseek>
 80030fc:	1c43      	adds	r3, r0, #1
 80030fe:	d102      	bne.n	8003106 <_lseek_r+0x1e>
 8003100:	682b      	ldr	r3, [r5, #0]
 8003102:	b103      	cbz	r3, 8003106 <_lseek_r+0x1e>
 8003104:	6023      	str	r3, [r4, #0]
 8003106:	bd38      	pop	{r3, r4, r5, pc}
 8003108:	20000270 	.word	0x20000270

0800310c <_read_r>:
 800310c:	b538      	push	{r3, r4, r5, lr}
 800310e:	4604      	mov	r4, r0
 8003110:	4608      	mov	r0, r1
 8003112:	4611      	mov	r1, r2
 8003114:	2200      	movs	r2, #0
 8003116:	4d05      	ldr	r5, [pc, #20]	@ (800312c <_read_r+0x20>)
 8003118:	602a      	str	r2, [r5, #0]
 800311a:	461a      	mov	r2, r3
 800311c:	f7fd fa86 	bl	800062c <_read>
 8003120:	1c43      	adds	r3, r0, #1
 8003122:	d102      	bne.n	800312a <_read_r+0x1e>
 8003124:	682b      	ldr	r3, [r5, #0]
 8003126:	b103      	cbz	r3, 800312a <_read_r+0x1e>
 8003128:	6023      	str	r3, [r4, #0]
 800312a:	bd38      	pop	{r3, r4, r5, pc}
 800312c:	20000270 	.word	0x20000270

08003130 <_write_r>:
 8003130:	b538      	push	{r3, r4, r5, lr}
 8003132:	4604      	mov	r4, r0
 8003134:	4608      	mov	r0, r1
 8003136:	4611      	mov	r1, r2
 8003138:	2200      	movs	r2, #0
 800313a:	4d05      	ldr	r5, [pc, #20]	@ (8003150 <_write_r+0x20>)
 800313c:	602a      	str	r2, [r5, #0]
 800313e:	461a      	mov	r2, r3
 8003140:	f7fd fa91 	bl	8000666 <_write>
 8003144:	1c43      	adds	r3, r0, #1
 8003146:	d102      	bne.n	800314e <_write_r+0x1e>
 8003148:	682b      	ldr	r3, [r5, #0]
 800314a:	b103      	cbz	r3, 800314e <_write_r+0x1e>
 800314c:	6023      	str	r3, [r4, #0]
 800314e:	bd38      	pop	{r3, r4, r5, pc}
 8003150:	20000270 	.word	0x20000270

08003154 <__errno>:
 8003154:	4b01      	ldr	r3, [pc, #4]	@ (800315c <__errno+0x8>)
 8003156:	6818      	ldr	r0, [r3, #0]
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	2000001c 	.word	0x2000001c

08003160 <__libc_init_array>:
 8003160:	b570      	push	{r4, r5, r6, lr}
 8003162:	2600      	movs	r6, #0
 8003164:	4d0c      	ldr	r5, [pc, #48]	@ (8003198 <__libc_init_array+0x38>)
 8003166:	4c0d      	ldr	r4, [pc, #52]	@ (800319c <__libc_init_array+0x3c>)
 8003168:	1b64      	subs	r4, r4, r5
 800316a:	10a4      	asrs	r4, r4, #2
 800316c:	42a6      	cmp	r6, r4
 800316e:	d109      	bne.n	8003184 <__libc_init_array+0x24>
 8003170:	f000 fdc4 	bl	8003cfc <_init>
 8003174:	2600      	movs	r6, #0
 8003176:	4d0a      	ldr	r5, [pc, #40]	@ (80031a0 <__libc_init_array+0x40>)
 8003178:	4c0a      	ldr	r4, [pc, #40]	@ (80031a4 <__libc_init_array+0x44>)
 800317a:	1b64      	subs	r4, r4, r5
 800317c:	10a4      	asrs	r4, r4, #2
 800317e:	42a6      	cmp	r6, r4
 8003180:	d105      	bne.n	800318e <__libc_init_array+0x2e>
 8003182:	bd70      	pop	{r4, r5, r6, pc}
 8003184:	f855 3b04 	ldr.w	r3, [r5], #4
 8003188:	4798      	blx	r3
 800318a:	3601      	adds	r6, #1
 800318c:	e7ee      	b.n	800316c <__libc_init_array+0xc>
 800318e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003192:	4798      	blx	r3
 8003194:	3601      	adds	r6, #1
 8003196:	e7f2      	b.n	800317e <__libc_init_array+0x1e>
 8003198:	08003da4 	.word	0x08003da4
 800319c:	08003da4 	.word	0x08003da4
 80031a0:	08003da4 	.word	0x08003da4
 80031a4:	08003da8 	.word	0x08003da8

080031a8 <__retarget_lock_init_recursive>:
 80031a8:	4770      	bx	lr

080031aa <__retarget_lock_acquire_recursive>:
 80031aa:	4770      	bx	lr

080031ac <__retarget_lock_release_recursive>:
 80031ac:	4770      	bx	lr
	...

080031b0 <_free_r>:
 80031b0:	b538      	push	{r3, r4, r5, lr}
 80031b2:	4605      	mov	r5, r0
 80031b4:	2900      	cmp	r1, #0
 80031b6:	d040      	beq.n	800323a <_free_r+0x8a>
 80031b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031bc:	1f0c      	subs	r4, r1, #4
 80031be:	2b00      	cmp	r3, #0
 80031c0:	bfb8      	it	lt
 80031c2:	18e4      	addlt	r4, r4, r3
 80031c4:	f000 f8de 	bl	8003384 <__malloc_lock>
 80031c8:	4a1c      	ldr	r2, [pc, #112]	@ (800323c <_free_r+0x8c>)
 80031ca:	6813      	ldr	r3, [r2, #0]
 80031cc:	b933      	cbnz	r3, 80031dc <_free_r+0x2c>
 80031ce:	6063      	str	r3, [r4, #4]
 80031d0:	6014      	str	r4, [r2, #0]
 80031d2:	4628      	mov	r0, r5
 80031d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80031d8:	f000 b8da 	b.w	8003390 <__malloc_unlock>
 80031dc:	42a3      	cmp	r3, r4
 80031de:	d908      	bls.n	80031f2 <_free_r+0x42>
 80031e0:	6820      	ldr	r0, [r4, #0]
 80031e2:	1821      	adds	r1, r4, r0
 80031e4:	428b      	cmp	r3, r1
 80031e6:	bf01      	itttt	eq
 80031e8:	6819      	ldreq	r1, [r3, #0]
 80031ea:	685b      	ldreq	r3, [r3, #4]
 80031ec:	1809      	addeq	r1, r1, r0
 80031ee:	6021      	streq	r1, [r4, #0]
 80031f0:	e7ed      	b.n	80031ce <_free_r+0x1e>
 80031f2:	461a      	mov	r2, r3
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	b10b      	cbz	r3, 80031fc <_free_r+0x4c>
 80031f8:	42a3      	cmp	r3, r4
 80031fa:	d9fa      	bls.n	80031f2 <_free_r+0x42>
 80031fc:	6811      	ldr	r1, [r2, #0]
 80031fe:	1850      	adds	r0, r2, r1
 8003200:	42a0      	cmp	r0, r4
 8003202:	d10b      	bne.n	800321c <_free_r+0x6c>
 8003204:	6820      	ldr	r0, [r4, #0]
 8003206:	4401      	add	r1, r0
 8003208:	1850      	adds	r0, r2, r1
 800320a:	4283      	cmp	r3, r0
 800320c:	6011      	str	r1, [r2, #0]
 800320e:	d1e0      	bne.n	80031d2 <_free_r+0x22>
 8003210:	6818      	ldr	r0, [r3, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	4408      	add	r0, r1
 8003216:	6010      	str	r0, [r2, #0]
 8003218:	6053      	str	r3, [r2, #4]
 800321a:	e7da      	b.n	80031d2 <_free_r+0x22>
 800321c:	d902      	bls.n	8003224 <_free_r+0x74>
 800321e:	230c      	movs	r3, #12
 8003220:	602b      	str	r3, [r5, #0]
 8003222:	e7d6      	b.n	80031d2 <_free_r+0x22>
 8003224:	6820      	ldr	r0, [r4, #0]
 8003226:	1821      	adds	r1, r4, r0
 8003228:	428b      	cmp	r3, r1
 800322a:	bf01      	itttt	eq
 800322c:	6819      	ldreq	r1, [r3, #0]
 800322e:	685b      	ldreq	r3, [r3, #4]
 8003230:	1809      	addeq	r1, r1, r0
 8003232:	6021      	streq	r1, [r4, #0]
 8003234:	6063      	str	r3, [r4, #4]
 8003236:	6054      	str	r4, [r2, #4]
 8003238:	e7cb      	b.n	80031d2 <_free_r+0x22>
 800323a:	bd38      	pop	{r3, r4, r5, pc}
 800323c:	2000027c 	.word	0x2000027c

08003240 <sbrk_aligned>:
 8003240:	b570      	push	{r4, r5, r6, lr}
 8003242:	4e0f      	ldr	r6, [pc, #60]	@ (8003280 <sbrk_aligned+0x40>)
 8003244:	460c      	mov	r4, r1
 8003246:	6831      	ldr	r1, [r6, #0]
 8003248:	4605      	mov	r5, r0
 800324a:	b911      	cbnz	r1, 8003252 <sbrk_aligned+0x12>
 800324c:	f000 fcb4 	bl	8003bb8 <_sbrk_r>
 8003250:	6030      	str	r0, [r6, #0]
 8003252:	4621      	mov	r1, r4
 8003254:	4628      	mov	r0, r5
 8003256:	f000 fcaf 	bl	8003bb8 <_sbrk_r>
 800325a:	1c43      	adds	r3, r0, #1
 800325c:	d103      	bne.n	8003266 <sbrk_aligned+0x26>
 800325e:	f04f 34ff 	mov.w	r4, #4294967295
 8003262:	4620      	mov	r0, r4
 8003264:	bd70      	pop	{r4, r5, r6, pc}
 8003266:	1cc4      	adds	r4, r0, #3
 8003268:	f024 0403 	bic.w	r4, r4, #3
 800326c:	42a0      	cmp	r0, r4
 800326e:	d0f8      	beq.n	8003262 <sbrk_aligned+0x22>
 8003270:	1a21      	subs	r1, r4, r0
 8003272:	4628      	mov	r0, r5
 8003274:	f000 fca0 	bl	8003bb8 <_sbrk_r>
 8003278:	3001      	adds	r0, #1
 800327a:	d1f2      	bne.n	8003262 <sbrk_aligned+0x22>
 800327c:	e7ef      	b.n	800325e <sbrk_aligned+0x1e>
 800327e:	bf00      	nop
 8003280:	20000278 	.word	0x20000278

08003284 <_malloc_r>:
 8003284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003288:	1ccd      	adds	r5, r1, #3
 800328a:	f025 0503 	bic.w	r5, r5, #3
 800328e:	3508      	adds	r5, #8
 8003290:	2d0c      	cmp	r5, #12
 8003292:	bf38      	it	cc
 8003294:	250c      	movcc	r5, #12
 8003296:	2d00      	cmp	r5, #0
 8003298:	4606      	mov	r6, r0
 800329a:	db01      	blt.n	80032a0 <_malloc_r+0x1c>
 800329c:	42a9      	cmp	r1, r5
 800329e:	d904      	bls.n	80032aa <_malloc_r+0x26>
 80032a0:	230c      	movs	r3, #12
 80032a2:	6033      	str	r3, [r6, #0]
 80032a4:	2000      	movs	r0, #0
 80032a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003380 <_malloc_r+0xfc>
 80032ae:	f000 f869 	bl	8003384 <__malloc_lock>
 80032b2:	f8d8 3000 	ldr.w	r3, [r8]
 80032b6:	461c      	mov	r4, r3
 80032b8:	bb44      	cbnz	r4, 800330c <_malloc_r+0x88>
 80032ba:	4629      	mov	r1, r5
 80032bc:	4630      	mov	r0, r6
 80032be:	f7ff ffbf 	bl	8003240 <sbrk_aligned>
 80032c2:	1c43      	adds	r3, r0, #1
 80032c4:	4604      	mov	r4, r0
 80032c6:	d158      	bne.n	800337a <_malloc_r+0xf6>
 80032c8:	f8d8 4000 	ldr.w	r4, [r8]
 80032cc:	4627      	mov	r7, r4
 80032ce:	2f00      	cmp	r7, #0
 80032d0:	d143      	bne.n	800335a <_malloc_r+0xd6>
 80032d2:	2c00      	cmp	r4, #0
 80032d4:	d04b      	beq.n	800336e <_malloc_r+0xea>
 80032d6:	6823      	ldr	r3, [r4, #0]
 80032d8:	4639      	mov	r1, r7
 80032da:	4630      	mov	r0, r6
 80032dc:	eb04 0903 	add.w	r9, r4, r3
 80032e0:	f000 fc6a 	bl	8003bb8 <_sbrk_r>
 80032e4:	4581      	cmp	r9, r0
 80032e6:	d142      	bne.n	800336e <_malloc_r+0xea>
 80032e8:	6821      	ldr	r1, [r4, #0]
 80032ea:	4630      	mov	r0, r6
 80032ec:	1a6d      	subs	r5, r5, r1
 80032ee:	4629      	mov	r1, r5
 80032f0:	f7ff ffa6 	bl	8003240 <sbrk_aligned>
 80032f4:	3001      	adds	r0, #1
 80032f6:	d03a      	beq.n	800336e <_malloc_r+0xea>
 80032f8:	6823      	ldr	r3, [r4, #0]
 80032fa:	442b      	add	r3, r5
 80032fc:	6023      	str	r3, [r4, #0]
 80032fe:	f8d8 3000 	ldr.w	r3, [r8]
 8003302:	685a      	ldr	r2, [r3, #4]
 8003304:	bb62      	cbnz	r2, 8003360 <_malloc_r+0xdc>
 8003306:	f8c8 7000 	str.w	r7, [r8]
 800330a:	e00f      	b.n	800332c <_malloc_r+0xa8>
 800330c:	6822      	ldr	r2, [r4, #0]
 800330e:	1b52      	subs	r2, r2, r5
 8003310:	d420      	bmi.n	8003354 <_malloc_r+0xd0>
 8003312:	2a0b      	cmp	r2, #11
 8003314:	d917      	bls.n	8003346 <_malloc_r+0xc2>
 8003316:	1961      	adds	r1, r4, r5
 8003318:	42a3      	cmp	r3, r4
 800331a:	6025      	str	r5, [r4, #0]
 800331c:	bf18      	it	ne
 800331e:	6059      	strne	r1, [r3, #4]
 8003320:	6863      	ldr	r3, [r4, #4]
 8003322:	bf08      	it	eq
 8003324:	f8c8 1000 	streq.w	r1, [r8]
 8003328:	5162      	str	r2, [r4, r5]
 800332a:	604b      	str	r3, [r1, #4]
 800332c:	4630      	mov	r0, r6
 800332e:	f000 f82f 	bl	8003390 <__malloc_unlock>
 8003332:	f104 000b 	add.w	r0, r4, #11
 8003336:	1d23      	adds	r3, r4, #4
 8003338:	f020 0007 	bic.w	r0, r0, #7
 800333c:	1ac2      	subs	r2, r0, r3
 800333e:	bf1c      	itt	ne
 8003340:	1a1b      	subne	r3, r3, r0
 8003342:	50a3      	strne	r3, [r4, r2]
 8003344:	e7af      	b.n	80032a6 <_malloc_r+0x22>
 8003346:	6862      	ldr	r2, [r4, #4]
 8003348:	42a3      	cmp	r3, r4
 800334a:	bf0c      	ite	eq
 800334c:	f8c8 2000 	streq.w	r2, [r8]
 8003350:	605a      	strne	r2, [r3, #4]
 8003352:	e7eb      	b.n	800332c <_malloc_r+0xa8>
 8003354:	4623      	mov	r3, r4
 8003356:	6864      	ldr	r4, [r4, #4]
 8003358:	e7ae      	b.n	80032b8 <_malloc_r+0x34>
 800335a:	463c      	mov	r4, r7
 800335c:	687f      	ldr	r7, [r7, #4]
 800335e:	e7b6      	b.n	80032ce <_malloc_r+0x4a>
 8003360:	461a      	mov	r2, r3
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	42a3      	cmp	r3, r4
 8003366:	d1fb      	bne.n	8003360 <_malloc_r+0xdc>
 8003368:	2300      	movs	r3, #0
 800336a:	6053      	str	r3, [r2, #4]
 800336c:	e7de      	b.n	800332c <_malloc_r+0xa8>
 800336e:	230c      	movs	r3, #12
 8003370:	4630      	mov	r0, r6
 8003372:	6033      	str	r3, [r6, #0]
 8003374:	f000 f80c 	bl	8003390 <__malloc_unlock>
 8003378:	e794      	b.n	80032a4 <_malloc_r+0x20>
 800337a:	6005      	str	r5, [r0, #0]
 800337c:	e7d6      	b.n	800332c <_malloc_r+0xa8>
 800337e:	bf00      	nop
 8003380:	2000027c 	.word	0x2000027c

08003384 <__malloc_lock>:
 8003384:	4801      	ldr	r0, [pc, #4]	@ (800338c <__malloc_lock+0x8>)
 8003386:	f7ff bf10 	b.w	80031aa <__retarget_lock_acquire_recursive>
 800338a:	bf00      	nop
 800338c:	20000274 	.word	0x20000274

08003390 <__malloc_unlock>:
 8003390:	4801      	ldr	r0, [pc, #4]	@ (8003398 <__malloc_unlock+0x8>)
 8003392:	f7ff bf0b 	b.w	80031ac <__retarget_lock_release_recursive>
 8003396:	bf00      	nop
 8003398:	20000274 	.word	0x20000274

0800339c <__sfputc_r>:
 800339c:	6893      	ldr	r3, [r2, #8]
 800339e:	b410      	push	{r4}
 80033a0:	3b01      	subs	r3, #1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	6093      	str	r3, [r2, #8]
 80033a6:	da07      	bge.n	80033b8 <__sfputc_r+0x1c>
 80033a8:	6994      	ldr	r4, [r2, #24]
 80033aa:	42a3      	cmp	r3, r4
 80033ac:	db01      	blt.n	80033b2 <__sfputc_r+0x16>
 80033ae:	290a      	cmp	r1, #10
 80033b0:	d102      	bne.n	80033b8 <__sfputc_r+0x1c>
 80033b2:	bc10      	pop	{r4}
 80033b4:	f000 bb6c 	b.w	8003a90 <__swbuf_r>
 80033b8:	6813      	ldr	r3, [r2, #0]
 80033ba:	1c58      	adds	r0, r3, #1
 80033bc:	6010      	str	r0, [r2, #0]
 80033be:	7019      	strb	r1, [r3, #0]
 80033c0:	4608      	mov	r0, r1
 80033c2:	bc10      	pop	{r4}
 80033c4:	4770      	bx	lr

080033c6 <__sfputs_r>:
 80033c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033c8:	4606      	mov	r6, r0
 80033ca:	460f      	mov	r7, r1
 80033cc:	4614      	mov	r4, r2
 80033ce:	18d5      	adds	r5, r2, r3
 80033d0:	42ac      	cmp	r4, r5
 80033d2:	d101      	bne.n	80033d8 <__sfputs_r+0x12>
 80033d4:	2000      	movs	r0, #0
 80033d6:	e007      	b.n	80033e8 <__sfputs_r+0x22>
 80033d8:	463a      	mov	r2, r7
 80033da:	4630      	mov	r0, r6
 80033dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033e0:	f7ff ffdc 	bl	800339c <__sfputc_r>
 80033e4:	1c43      	adds	r3, r0, #1
 80033e6:	d1f3      	bne.n	80033d0 <__sfputs_r+0xa>
 80033e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080033ec <_vfiprintf_r>:
 80033ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033f0:	460d      	mov	r5, r1
 80033f2:	4614      	mov	r4, r2
 80033f4:	4698      	mov	r8, r3
 80033f6:	4606      	mov	r6, r0
 80033f8:	b09d      	sub	sp, #116	@ 0x74
 80033fa:	b118      	cbz	r0, 8003404 <_vfiprintf_r+0x18>
 80033fc:	6a03      	ldr	r3, [r0, #32]
 80033fe:	b90b      	cbnz	r3, 8003404 <_vfiprintf_r+0x18>
 8003400:	f7ff fdce 	bl	8002fa0 <__sinit>
 8003404:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003406:	07d9      	lsls	r1, r3, #31
 8003408:	d405      	bmi.n	8003416 <_vfiprintf_r+0x2a>
 800340a:	89ab      	ldrh	r3, [r5, #12]
 800340c:	059a      	lsls	r2, r3, #22
 800340e:	d402      	bmi.n	8003416 <_vfiprintf_r+0x2a>
 8003410:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003412:	f7ff feca 	bl	80031aa <__retarget_lock_acquire_recursive>
 8003416:	89ab      	ldrh	r3, [r5, #12]
 8003418:	071b      	lsls	r3, r3, #28
 800341a:	d501      	bpl.n	8003420 <_vfiprintf_r+0x34>
 800341c:	692b      	ldr	r3, [r5, #16]
 800341e:	b99b      	cbnz	r3, 8003448 <_vfiprintf_r+0x5c>
 8003420:	4629      	mov	r1, r5
 8003422:	4630      	mov	r0, r6
 8003424:	f000 fb72 	bl	8003b0c <__swsetup_r>
 8003428:	b170      	cbz	r0, 8003448 <_vfiprintf_r+0x5c>
 800342a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800342c:	07dc      	lsls	r4, r3, #31
 800342e:	d504      	bpl.n	800343a <_vfiprintf_r+0x4e>
 8003430:	f04f 30ff 	mov.w	r0, #4294967295
 8003434:	b01d      	add	sp, #116	@ 0x74
 8003436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800343a:	89ab      	ldrh	r3, [r5, #12]
 800343c:	0598      	lsls	r0, r3, #22
 800343e:	d4f7      	bmi.n	8003430 <_vfiprintf_r+0x44>
 8003440:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003442:	f7ff feb3 	bl	80031ac <__retarget_lock_release_recursive>
 8003446:	e7f3      	b.n	8003430 <_vfiprintf_r+0x44>
 8003448:	2300      	movs	r3, #0
 800344a:	9309      	str	r3, [sp, #36]	@ 0x24
 800344c:	2320      	movs	r3, #32
 800344e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003452:	2330      	movs	r3, #48	@ 0x30
 8003454:	f04f 0901 	mov.w	r9, #1
 8003458:	f8cd 800c 	str.w	r8, [sp, #12]
 800345c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8003608 <_vfiprintf_r+0x21c>
 8003460:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003464:	4623      	mov	r3, r4
 8003466:	469a      	mov	sl, r3
 8003468:	f813 2b01 	ldrb.w	r2, [r3], #1
 800346c:	b10a      	cbz	r2, 8003472 <_vfiprintf_r+0x86>
 800346e:	2a25      	cmp	r2, #37	@ 0x25
 8003470:	d1f9      	bne.n	8003466 <_vfiprintf_r+0x7a>
 8003472:	ebba 0b04 	subs.w	fp, sl, r4
 8003476:	d00b      	beq.n	8003490 <_vfiprintf_r+0xa4>
 8003478:	465b      	mov	r3, fp
 800347a:	4622      	mov	r2, r4
 800347c:	4629      	mov	r1, r5
 800347e:	4630      	mov	r0, r6
 8003480:	f7ff ffa1 	bl	80033c6 <__sfputs_r>
 8003484:	3001      	adds	r0, #1
 8003486:	f000 80a7 	beq.w	80035d8 <_vfiprintf_r+0x1ec>
 800348a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800348c:	445a      	add	r2, fp
 800348e:	9209      	str	r2, [sp, #36]	@ 0x24
 8003490:	f89a 3000 	ldrb.w	r3, [sl]
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 809f 	beq.w	80035d8 <_vfiprintf_r+0x1ec>
 800349a:	2300      	movs	r3, #0
 800349c:	f04f 32ff 	mov.w	r2, #4294967295
 80034a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034a4:	f10a 0a01 	add.w	sl, sl, #1
 80034a8:	9304      	str	r3, [sp, #16]
 80034aa:	9307      	str	r3, [sp, #28]
 80034ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80034b0:	931a      	str	r3, [sp, #104]	@ 0x68
 80034b2:	4654      	mov	r4, sl
 80034b4:	2205      	movs	r2, #5
 80034b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034ba:	4853      	ldr	r0, [pc, #332]	@ (8003608 <_vfiprintf_r+0x21c>)
 80034bc:	f000 fb8c 	bl	8003bd8 <memchr>
 80034c0:	9a04      	ldr	r2, [sp, #16]
 80034c2:	b9d8      	cbnz	r0, 80034fc <_vfiprintf_r+0x110>
 80034c4:	06d1      	lsls	r1, r2, #27
 80034c6:	bf44      	itt	mi
 80034c8:	2320      	movmi	r3, #32
 80034ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80034ce:	0713      	lsls	r3, r2, #28
 80034d0:	bf44      	itt	mi
 80034d2:	232b      	movmi	r3, #43	@ 0x2b
 80034d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80034d8:	f89a 3000 	ldrb.w	r3, [sl]
 80034dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80034de:	d015      	beq.n	800350c <_vfiprintf_r+0x120>
 80034e0:	4654      	mov	r4, sl
 80034e2:	2000      	movs	r0, #0
 80034e4:	f04f 0c0a 	mov.w	ip, #10
 80034e8:	9a07      	ldr	r2, [sp, #28]
 80034ea:	4621      	mov	r1, r4
 80034ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80034f0:	3b30      	subs	r3, #48	@ 0x30
 80034f2:	2b09      	cmp	r3, #9
 80034f4:	d94b      	bls.n	800358e <_vfiprintf_r+0x1a2>
 80034f6:	b1b0      	cbz	r0, 8003526 <_vfiprintf_r+0x13a>
 80034f8:	9207      	str	r2, [sp, #28]
 80034fa:	e014      	b.n	8003526 <_vfiprintf_r+0x13a>
 80034fc:	eba0 0308 	sub.w	r3, r0, r8
 8003500:	fa09 f303 	lsl.w	r3, r9, r3
 8003504:	4313      	orrs	r3, r2
 8003506:	46a2      	mov	sl, r4
 8003508:	9304      	str	r3, [sp, #16]
 800350a:	e7d2      	b.n	80034b2 <_vfiprintf_r+0xc6>
 800350c:	9b03      	ldr	r3, [sp, #12]
 800350e:	1d19      	adds	r1, r3, #4
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	9103      	str	r1, [sp, #12]
 8003514:	2b00      	cmp	r3, #0
 8003516:	bfbb      	ittet	lt
 8003518:	425b      	neglt	r3, r3
 800351a:	f042 0202 	orrlt.w	r2, r2, #2
 800351e:	9307      	strge	r3, [sp, #28]
 8003520:	9307      	strlt	r3, [sp, #28]
 8003522:	bfb8      	it	lt
 8003524:	9204      	strlt	r2, [sp, #16]
 8003526:	7823      	ldrb	r3, [r4, #0]
 8003528:	2b2e      	cmp	r3, #46	@ 0x2e
 800352a:	d10a      	bne.n	8003542 <_vfiprintf_r+0x156>
 800352c:	7863      	ldrb	r3, [r4, #1]
 800352e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003530:	d132      	bne.n	8003598 <_vfiprintf_r+0x1ac>
 8003532:	9b03      	ldr	r3, [sp, #12]
 8003534:	3402      	adds	r4, #2
 8003536:	1d1a      	adds	r2, r3, #4
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	9203      	str	r2, [sp, #12]
 800353c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003540:	9305      	str	r3, [sp, #20]
 8003542:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800360c <_vfiprintf_r+0x220>
 8003546:	2203      	movs	r2, #3
 8003548:	4650      	mov	r0, sl
 800354a:	7821      	ldrb	r1, [r4, #0]
 800354c:	f000 fb44 	bl	8003bd8 <memchr>
 8003550:	b138      	cbz	r0, 8003562 <_vfiprintf_r+0x176>
 8003552:	2240      	movs	r2, #64	@ 0x40
 8003554:	9b04      	ldr	r3, [sp, #16]
 8003556:	eba0 000a 	sub.w	r0, r0, sl
 800355a:	4082      	lsls	r2, r0
 800355c:	4313      	orrs	r3, r2
 800355e:	3401      	adds	r4, #1
 8003560:	9304      	str	r3, [sp, #16]
 8003562:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003566:	2206      	movs	r2, #6
 8003568:	4829      	ldr	r0, [pc, #164]	@ (8003610 <_vfiprintf_r+0x224>)
 800356a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800356e:	f000 fb33 	bl	8003bd8 <memchr>
 8003572:	2800      	cmp	r0, #0
 8003574:	d03f      	beq.n	80035f6 <_vfiprintf_r+0x20a>
 8003576:	4b27      	ldr	r3, [pc, #156]	@ (8003614 <_vfiprintf_r+0x228>)
 8003578:	bb1b      	cbnz	r3, 80035c2 <_vfiprintf_r+0x1d6>
 800357a:	9b03      	ldr	r3, [sp, #12]
 800357c:	3307      	adds	r3, #7
 800357e:	f023 0307 	bic.w	r3, r3, #7
 8003582:	3308      	adds	r3, #8
 8003584:	9303      	str	r3, [sp, #12]
 8003586:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003588:	443b      	add	r3, r7
 800358a:	9309      	str	r3, [sp, #36]	@ 0x24
 800358c:	e76a      	b.n	8003464 <_vfiprintf_r+0x78>
 800358e:	460c      	mov	r4, r1
 8003590:	2001      	movs	r0, #1
 8003592:	fb0c 3202 	mla	r2, ip, r2, r3
 8003596:	e7a8      	b.n	80034ea <_vfiprintf_r+0xfe>
 8003598:	2300      	movs	r3, #0
 800359a:	f04f 0c0a 	mov.w	ip, #10
 800359e:	4619      	mov	r1, r3
 80035a0:	3401      	adds	r4, #1
 80035a2:	9305      	str	r3, [sp, #20]
 80035a4:	4620      	mov	r0, r4
 80035a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035aa:	3a30      	subs	r2, #48	@ 0x30
 80035ac:	2a09      	cmp	r2, #9
 80035ae:	d903      	bls.n	80035b8 <_vfiprintf_r+0x1cc>
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d0c6      	beq.n	8003542 <_vfiprintf_r+0x156>
 80035b4:	9105      	str	r1, [sp, #20]
 80035b6:	e7c4      	b.n	8003542 <_vfiprintf_r+0x156>
 80035b8:	4604      	mov	r4, r0
 80035ba:	2301      	movs	r3, #1
 80035bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80035c0:	e7f0      	b.n	80035a4 <_vfiprintf_r+0x1b8>
 80035c2:	ab03      	add	r3, sp, #12
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	462a      	mov	r2, r5
 80035c8:	4630      	mov	r0, r6
 80035ca:	4b13      	ldr	r3, [pc, #76]	@ (8003618 <_vfiprintf_r+0x22c>)
 80035cc:	a904      	add	r1, sp, #16
 80035ce:	f3af 8000 	nop.w
 80035d2:	4607      	mov	r7, r0
 80035d4:	1c78      	adds	r0, r7, #1
 80035d6:	d1d6      	bne.n	8003586 <_vfiprintf_r+0x19a>
 80035d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80035da:	07d9      	lsls	r1, r3, #31
 80035dc:	d405      	bmi.n	80035ea <_vfiprintf_r+0x1fe>
 80035de:	89ab      	ldrh	r3, [r5, #12]
 80035e0:	059a      	lsls	r2, r3, #22
 80035e2:	d402      	bmi.n	80035ea <_vfiprintf_r+0x1fe>
 80035e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80035e6:	f7ff fde1 	bl	80031ac <__retarget_lock_release_recursive>
 80035ea:	89ab      	ldrh	r3, [r5, #12]
 80035ec:	065b      	lsls	r3, r3, #25
 80035ee:	f53f af1f 	bmi.w	8003430 <_vfiprintf_r+0x44>
 80035f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80035f4:	e71e      	b.n	8003434 <_vfiprintf_r+0x48>
 80035f6:	ab03      	add	r3, sp, #12
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	462a      	mov	r2, r5
 80035fc:	4630      	mov	r0, r6
 80035fe:	4b06      	ldr	r3, [pc, #24]	@ (8003618 <_vfiprintf_r+0x22c>)
 8003600:	a904      	add	r1, sp, #16
 8003602:	f000 f87d 	bl	8003700 <_printf_i>
 8003606:	e7e4      	b.n	80035d2 <_vfiprintf_r+0x1e6>
 8003608:	08003d6e 	.word	0x08003d6e
 800360c:	08003d74 	.word	0x08003d74
 8003610:	08003d78 	.word	0x08003d78
 8003614:	00000000 	.word	0x00000000
 8003618:	080033c7 	.word	0x080033c7

0800361c <_printf_common>:
 800361c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003620:	4616      	mov	r6, r2
 8003622:	4698      	mov	r8, r3
 8003624:	688a      	ldr	r2, [r1, #8]
 8003626:	690b      	ldr	r3, [r1, #16]
 8003628:	4607      	mov	r7, r0
 800362a:	4293      	cmp	r3, r2
 800362c:	bfb8      	it	lt
 800362e:	4613      	movlt	r3, r2
 8003630:	6033      	str	r3, [r6, #0]
 8003632:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003636:	460c      	mov	r4, r1
 8003638:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800363c:	b10a      	cbz	r2, 8003642 <_printf_common+0x26>
 800363e:	3301      	adds	r3, #1
 8003640:	6033      	str	r3, [r6, #0]
 8003642:	6823      	ldr	r3, [r4, #0]
 8003644:	0699      	lsls	r1, r3, #26
 8003646:	bf42      	ittt	mi
 8003648:	6833      	ldrmi	r3, [r6, #0]
 800364a:	3302      	addmi	r3, #2
 800364c:	6033      	strmi	r3, [r6, #0]
 800364e:	6825      	ldr	r5, [r4, #0]
 8003650:	f015 0506 	ands.w	r5, r5, #6
 8003654:	d106      	bne.n	8003664 <_printf_common+0x48>
 8003656:	f104 0a19 	add.w	sl, r4, #25
 800365a:	68e3      	ldr	r3, [r4, #12]
 800365c:	6832      	ldr	r2, [r6, #0]
 800365e:	1a9b      	subs	r3, r3, r2
 8003660:	42ab      	cmp	r3, r5
 8003662:	dc2b      	bgt.n	80036bc <_printf_common+0xa0>
 8003664:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003668:	6822      	ldr	r2, [r4, #0]
 800366a:	3b00      	subs	r3, #0
 800366c:	bf18      	it	ne
 800366e:	2301      	movne	r3, #1
 8003670:	0692      	lsls	r2, r2, #26
 8003672:	d430      	bmi.n	80036d6 <_printf_common+0xba>
 8003674:	4641      	mov	r1, r8
 8003676:	4638      	mov	r0, r7
 8003678:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800367c:	47c8      	blx	r9
 800367e:	3001      	adds	r0, #1
 8003680:	d023      	beq.n	80036ca <_printf_common+0xae>
 8003682:	6823      	ldr	r3, [r4, #0]
 8003684:	6922      	ldr	r2, [r4, #16]
 8003686:	f003 0306 	and.w	r3, r3, #6
 800368a:	2b04      	cmp	r3, #4
 800368c:	bf14      	ite	ne
 800368e:	2500      	movne	r5, #0
 8003690:	6833      	ldreq	r3, [r6, #0]
 8003692:	f04f 0600 	mov.w	r6, #0
 8003696:	bf08      	it	eq
 8003698:	68e5      	ldreq	r5, [r4, #12]
 800369a:	f104 041a 	add.w	r4, r4, #26
 800369e:	bf08      	it	eq
 80036a0:	1aed      	subeq	r5, r5, r3
 80036a2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80036a6:	bf08      	it	eq
 80036a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036ac:	4293      	cmp	r3, r2
 80036ae:	bfc4      	itt	gt
 80036b0:	1a9b      	subgt	r3, r3, r2
 80036b2:	18ed      	addgt	r5, r5, r3
 80036b4:	42b5      	cmp	r5, r6
 80036b6:	d11a      	bne.n	80036ee <_printf_common+0xd2>
 80036b8:	2000      	movs	r0, #0
 80036ba:	e008      	b.n	80036ce <_printf_common+0xb2>
 80036bc:	2301      	movs	r3, #1
 80036be:	4652      	mov	r2, sl
 80036c0:	4641      	mov	r1, r8
 80036c2:	4638      	mov	r0, r7
 80036c4:	47c8      	blx	r9
 80036c6:	3001      	adds	r0, #1
 80036c8:	d103      	bne.n	80036d2 <_printf_common+0xb6>
 80036ca:	f04f 30ff 	mov.w	r0, #4294967295
 80036ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036d2:	3501      	adds	r5, #1
 80036d4:	e7c1      	b.n	800365a <_printf_common+0x3e>
 80036d6:	2030      	movs	r0, #48	@ 0x30
 80036d8:	18e1      	adds	r1, r4, r3
 80036da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80036de:	1c5a      	adds	r2, r3, #1
 80036e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80036e4:	4422      	add	r2, r4
 80036e6:	3302      	adds	r3, #2
 80036e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80036ec:	e7c2      	b.n	8003674 <_printf_common+0x58>
 80036ee:	2301      	movs	r3, #1
 80036f0:	4622      	mov	r2, r4
 80036f2:	4641      	mov	r1, r8
 80036f4:	4638      	mov	r0, r7
 80036f6:	47c8      	blx	r9
 80036f8:	3001      	adds	r0, #1
 80036fa:	d0e6      	beq.n	80036ca <_printf_common+0xae>
 80036fc:	3601      	adds	r6, #1
 80036fe:	e7d9      	b.n	80036b4 <_printf_common+0x98>

08003700 <_printf_i>:
 8003700:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003704:	7e0f      	ldrb	r7, [r1, #24]
 8003706:	4691      	mov	r9, r2
 8003708:	2f78      	cmp	r7, #120	@ 0x78
 800370a:	4680      	mov	r8, r0
 800370c:	460c      	mov	r4, r1
 800370e:	469a      	mov	sl, r3
 8003710:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003712:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003716:	d807      	bhi.n	8003728 <_printf_i+0x28>
 8003718:	2f62      	cmp	r7, #98	@ 0x62
 800371a:	d80a      	bhi.n	8003732 <_printf_i+0x32>
 800371c:	2f00      	cmp	r7, #0
 800371e:	f000 80d3 	beq.w	80038c8 <_printf_i+0x1c8>
 8003722:	2f58      	cmp	r7, #88	@ 0x58
 8003724:	f000 80ba 	beq.w	800389c <_printf_i+0x19c>
 8003728:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800372c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003730:	e03a      	b.n	80037a8 <_printf_i+0xa8>
 8003732:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003736:	2b15      	cmp	r3, #21
 8003738:	d8f6      	bhi.n	8003728 <_printf_i+0x28>
 800373a:	a101      	add	r1, pc, #4	@ (adr r1, 8003740 <_printf_i+0x40>)
 800373c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003740:	08003799 	.word	0x08003799
 8003744:	080037ad 	.word	0x080037ad
 8003748:	08003729 	.word	0x08003729
 800374c:	08003729 	.word	0x08003729
 8003750:	08003729 	.word	0x08003729
 8003754:	08003729 	.word	0x08003729
 8003758:	080037ad 	.word	0x080037ad
 800375c:	08003729 	.word	0x08003729
 8003760:	08003729 	.word	0x08003729
 8003764:	08003729 	.word	0x08003729
 8003768:	08003729 	.word	0x08003729
 800376c:	080038af 	.word	0x080038af
 8003770:	080037d7 	.word	0x080037d7
 8003774:	08003869 	.word	0x08003869
 8003778:	08003729 	.word	0x08003729
 800377c:	08003729 	.word	0x08003729
 8003780:	080038d1 	.word	0x080038d1
 8003784:	08003729 	.word	0x08003729
 8003788:	080037d7 	.word	0x080037d7
 800378c:	08003729 	.word	0x08003729
 8003790:	08003729 	.word	0x08003729
 8003794:	08003871 	.word	0x08003871
 8003798:	6833      	ldr	r3, [r6, #0]
 800379a:	1d1a      	adds	r2, r3, #4
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	6032      	str	r2, [r6, #0]
 80037a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80037a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80037a8:	2301      	movs	r3, #1
 80037aa:	e09e      	b.n	80038ea <_printf_i+0x1ea>
 80037ac:	6833      	ldr	r3, [r6, #0]
 80037ae:	6820      	ldr	r0, [r4, #0]
 80037b0:	1d19      	adds	r1, r3, #4
 80037b2:	6031      	str	r1, [r6, #0]
 80037b4:	0606      	lsls	r6, r0, #24
 80037b6:	d501      	bpl.n	80037bc <_printf_i+0xbc>
 80037b8:	681d      	ldr	r5, [r3, #0]
 80037ba:	e003      	b.n	80037c4 <_printf_i+0xc4>
 80037bc:	0645      	lsls	r5, r0, #25
 80037be:	d5fb      	bpl.n	80037b8 <_printf_i+0xb8>
 80037c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80037c4:	2d00      	cmp	r5, #0
 80037c6:	da03      	bge.n	80037d0 <_printf_i+0xd0>
 80037c8:	232d      	movs	r3, #45	@ 0x2d
 80037ca:	426d      	negs	r5, r5
 80037cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80037d0:	230a      	movs	r3, #10
 80037d2:	4859      	ldr	r0, [pc, #356]	@ (8003938 <_printf_i+0x238>)
 80037d4:	e011      	b.n	80037fa <_printf_i+0xfa>
 80037d6:	6821      	ldr	r1, [r4, #0]
 80037d8:	6833      	ldr	r3, [r6, #0]
 80037da:	0608      	lsls	r0, r1, #24
 80037dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80037e0:	d402      	bmi.n	80037e8 <_printf_i+0xe8>
 80037e2:	0649      	lsls	r1, r1, #25
 80037e4:	bf48      	it	mi
 80037e6:	b2ad      	uxthmi	r5, r5
 80037e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80037ea:	6033      	str	r3, [r6, #0]
 80037ec:	bf14      	ite	ne
 80037ee:	230a      	movne	r3, #10
 80037f0:	2308      	moveq	r3, #8
 80037f2:	4851      	ldr	r0, [pc, #324]	@ (8003938 <_printf_i+0x238>)
 80037f4:	2100      	movs	r1, #0
 80037f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80037fa:	6866      	ldr	r6, [r4, #4]
 80037fc:	2e00      	cmp	r6, #0
 80037fe:	bfa8      	it	ge
 8003800:	6821      	ldrge	r1, [r4, #0]
 8003802:	60a6      	str	r6, [r4, #8]
 8003804:	bfa4      	itt	ge
 8003806:	f021 0104 	bicge.w	r1, r1, #4
 800380a:	6021      	strge	r1, [r4, #0]
 800380c:	b90d      	cbnz	r5, 8003812 <_printf_i+0x112>
 800380e:	2e00      	cmp	r6, #0
 8003810:	d04b      	beq.n	80038aa <_printf_i+0x1aa>
 8003812:	4616      	mov	r6, r2
 8003814:	fbb5 f1f3 	udiv	r1, r5, r3
 8003818:	fb03 5711 	mls	r7, r3, r1, r5
 800381c:	5dc7      	ldrb	r7, [r0, r7]
 800381e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003822:	462f      	mov	r7, r5
 8003824:	42bb      	cmp	r3, r7
 8003826:	460d      	mov	r5, r1
 8003828:	d9f4      	bls.n	8003814 <_printf_i+0x114>
 800382a:	2b08      	cmp	r3, #8
 800382c:	d10b      	bne.n	8003846 <_printf_i+0x146>
 800382e:	6823      	ldr	r3, [r4, #0]
 8003830:	07df      	lsls	r7, r3, #31
 8003832:	d508      	bpl.n	8003846 <_printf_i+0x146>
 8003834:	6923      	ldr	r3, [r4, #16]
 8003836:	6861      	ldr	r1, [r4, #4]
 8003838:	4299      	cmp	r1, r3
 800383a:	bfde      	ittt	le
 800383c:	2330      	movle	r3, #48	@ 0x30
 800383e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003842:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003846:	1b92      	subs	r2, r2, r6
 8003848:	6122      	str	r2, [r4, #16]
 800384a:	464b      	mov	r3, r9
 800384c:	4621      	mov	r1, r4
 800384e:	4640      	mov	r0, r8
 8003850:	f8cd a000 	str.w	sl, [sp]
 8003854:	aa03      	add	r2, sp, #12
 8003856:	f7ff fee1 	bl	800361c <_printf_common>
 800385a:	3001      	adds	r0, #1
 800385c:	d14a      	bne.n	80038f4 <_printf_i+0x1f4>
 800385e:	f04f 30ff 	mov.w	r0, #4294967295
 8003862:	b004      	add	sp, #16
 8003864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003868:	6823      	ldr	r3, [r4, #0]
 800386a:	f043 0320 	orr.w	r3, r3, #32
 800386e:	6023      	str	r3, [r4, #0]
 8003870:	2778      	movs	r7, #120	@ 0x78
 8003872:	4832      	ldr	r0, [pc, #200]	@ (800393c <_printf_i+0x23c>)
 8003874:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003878:	6823      	ldr	r3, [r4, #0]
 800387a:	6831      	ldr	r1, [r6, #0]
 800387c:	061f      	lsls	r7, r3, #24
 800387e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003882:	d402      	bmi.n	800388a <_printf_i+0x18a>
 8003884:	065f      	lsls	r7, r3, #25
 8003886:	bf48      	it	mi
 8003888:	b2ad      	uxthmi	r5, r5
 800388a:	6031      	str	r1, [r6, #0]
 800388c:	07d9      	lsls	r1, r3, #31
 800388e:	bf44      	itt	mi
 8003890:	f043 0320 	orrmi.w	r3, r3, #32
 8003894:	6023      	strmi	r3, [r4, #0]
 8003896:	b11d      	cbz	r5, 80038a0 <_printf_i+0x1a0>
 8003898:	2310      	movs	r3, #16
 800389a:	e7ab      	b.n	80037f4 <_printf_i+0xf4>
 800389c:	4826      	ldr	r0, [pc, #152]	@ (8003938 <_printf_i+0x238>)
 800389e:	e7e9      	b.n	8003874 <_printf_i+0x174>
 80038a0:	6823      	ldr	r3, [r4, #0]
 80038a2:	f023 0320 	bic.w	r3, r3, #32
 80038a6:	6023      	str	r3, [r4, #0]
 80038a8:	e7f6      	b.n	8003898 <_printf_i+0x198>
 80038aa:	4616      	mov	r6, r2
 80038ac:	e7bd      	b.n	800382a <_printf_i+0x12a>
 80038ae:	6833      	ldr	r3, [r6, #0]
 80038b0:	6825      	ldr	r5, [r4, #0]
 80038b2:	1d18      	adds	r0, r3, #4
 80038b4:	6961      	ldr	r1, [r4, #20]
 80038b6:	6030      	str	r0, [r6, #0]
 80038b8:	062e      	lsls	r6, r5, #24
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	d501      	bpl.n	80038c2 <_printf_i+0x1c2>
 80038be:	6019      	str	r1, [r3, #0]
 80038c0:	e002      	b.n	80038c8 <_printf_i+0x1c8>
 80038c2:	0668      	lsls	r0, r5, #25
 80038c4:	d5fb      	bpl.n	80038be <_printf_i+0x1be>
 80038c6:	8019      	strh	r1, [r3, #0]
 80038c8:	2300      	movs	r3, #0
 80038ca:	4616      	mov	r6, r2
 80038cc:	6123      	str	r3, [r4, #16]
 80038ce:	e7bc      	b.n	800384a <_printf_i+0x14a>
 80038d0:	6833      	ldr	r3, [r6, #0]
 80038d2:	2100      	movs	r1, #0
 80038d4:	1d1a      	adds	r2, r3, #4
 80038d6:	6032      	str	r2, [r6, #0]
 80038d8:	681e      	ldr	r6, [r3, #0]
 80038da:	6862      	ldr	r2, [r4, #4]
 80038dc:	4630      	mov	r0, r6
 80038de:	f000 f97b 	bl	8003bd8 <memchr>
 80038e2:	b108      	cbz	r0, 80038e8 <_printf_i+0x1e8>
 80038e4:	1b80      	subs	r0, r0, r6
 80038e6:	6060      	str	r0, [r4, #4]
 80038e8:	6863      	ldr	r3, [r4, #4]
 80038ea:	6123      	str	r3, [r4, #16]
 80038ec:	2300      	movs	r3, #0
 80038ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80038f2:	e7aa      	b.n	800384a <_printf_i+0x14a>
 80038f4:	4632      	mov	r2, r6
 80038f6:	4649      	mov	r1, r9
 80038f8:	4640      	mov	r0, r8
 80038fa:	6923      	ldr	r3, [r4, #16]
 80038fc:	47d0      	blx	sl
 80038fe:	3001      	adds	r0, #1
 8003900:	d0ad      	beq.n	800385e <_printf_i+0x15e>
 8003902:	6823      	ldr	r3, [r4, #0]
 8003904:	079b      	lsls	r3, r3, #30
 8003906:	d413      	bmi.n	8003930 <_printf_i+0x230>
 8003908:	68e0      	ldr	r0, [r4, #12]
 800390a:	9b03      	ldr	r3, [sp, #12]
 800390c:	4298      	cmp	r0, r3
 800390e:	bfb8      	it	lt
 8003910:	4618      	movlt	r0, r3
 8003912:	e7a6      	b.n	8003862 <_printf_i+0x162>
 8003914:	2301      	movs	r3, #1
 8003916:	4632      	mov	r2, r6
 8003918:	4649      	mov	r1, r9
 800391a:	4640      	mov	r0, r8
 800391c:	47d0      	blx	sl
 800391e:	3001      	adds	r0, #1
 8003920:	d09d      	beq.n	800385e <_printf_i+0x15e>
 8003922:	3501      	adds	r5, #1
 8003924:	68e3      	ldr	r3, [r4, #12]
 8003926:	9903      	ldr	r1, [sp, #12]
 8003928:	1a5b      	subs	r3, r3, r1
 800392a:	42ab      	cmp	r3, r5
 800392c:	dcf2      	bgt.n	8003914 <_printf_i+0x214>
 800392e:	e7eb      	b.n	8003908 <_printf_i+0x208>
 8003930:	2500      	movs	r5, #0
 8003932:	f104 0619 	add.w	r6, r4, #25
 8003936:	e7f5      	b.n	8003924 <_printf_i+0x224>
 8003938:	08003d7f 	.word	0x08003d7f
 800393c:	08003d90 	.word	0x08003d90

08003940 <__sflush_r>:
 8003940:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003946:	0716      	lsls	r6, r2, #28
 8003948:	4605      	mov	r5, r0
 800394a:	460c      	mov	r4, r1
 800394c:	d454      	bmi.n	80039f8 <__sflush_r+0xb8>
 800394e:	684b      	ldr	r3, [r1, #4]
 8003950:	2b00      	cmp	r3, #0
 8003952:	dc02      	bgt.n	800395a <__sflush_r+0x1a>
 8003954:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003956:	2b00      	cmp	r3, #0
 8003958:	dd48      	ble.n	80039ec <__sflush_r+0xac>
 800395a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800395c:	2e00      	cmp	r6, #0
 800395e:	d045      	beq.n	80039ec <__sflush_r+0xac>
 8003960:	2300      	movs	r3, #0
 8003962:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003966:	682f      	ldr	r7, [r5, #0]
 8003968:	6a21      	ldr	r1, [r4, #32]
 800396a:	602b      	str	r3, [r5, #0]
 800396c:	d030      	beq.n	80039d0 <__sflush_r+0x90>
 800396e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003970:	89a3      	ldrh	r3, [r4, #12]
 8003972:	0759      	lsls	r1, r3, #29
 8003974:	d505      	bpl.n	8003982 <__sflush_r+0x42>
 8003976:	6863      	ldr	r3, [r4, #4]
 8003978:	1ad2      	subs	r2, r2, r3
 800397a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800397c:	b10b      	cbz	r3, 8003982 <__sflush_r+0x42>
 800397e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003980:	1ad2      	subs	r2, r2, r3
 8003982:	2300      	movs	r3, #0
 8003984:	4628      	mov	r0, r5
 8003986:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003988:	6a21      	ldr	r1, [r4, #32]
 800398a:	47b0      	blx	r6
 800398c:	1c43      	adds	r3, r0, #1
 800398e:	89a3      	ldrh	r3, [r4, #12]
 8003990:	d106      	bne.n	80039a0 <__sflush_r+0x60>
 8003992:	6829      	ldr	r1, [r5, #0]
 8003994:	291d      	cmp	r1, #29
 8003996:	d82b      	bhi.n	80039f0 <__sflush_r+0xb0>
 8003998:	4a28      	ldr	r2, [pc, #160]	@ (8003a3c <__sflush_r+0xfc>)
 800399a:	410a      	asrs	r2, r1
 800399c:	07d6      	lsls	r6, r2, #31
 800399e:	d427      	bmi.n	80039f0 <__sflush_r+0xb0>
 80039a0:	2200      	movs	r2, #0
 80039a2:	6062      	str	r2, [r4, #4]
 80039a4:	6922      	ldr	r2, [r4, #16]
 80039a6:	04d9      	lsls	r1, r3, #19
 80039a8:	6022      	str	r2, [r4, #0]
 80039aa:	d504      	bpl.n	80039b6 <__sflush_r+0x76>
 80039ac:	1c42      	adds	r2, r0, #1
 80039ae:	d101      	bne.n	80039b4 <__sflush_r+0x74>
 80039b0:	682b      	ldr	r3, [r5, #0]
 80039b2:	b903      	cbnz	r3, 80039b6 <__sflush_r+0x76>
 80039b4:	6560      	str	r0, [r4, #84]	@ 0x54
 80039b6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80039b8:	602f      	str	r7, [r5, #0]
 80039ba:	b1b9      	cbz	r1, 80039ec <__sflush_r+0xac>
 80039bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80039c0:	4299      	cmp	r1, r3
 80039c2:	d002      	beq.n	80039ca <__sflush_r+0x8a>
 80039c4:	4628      	mov	r0, r5
 80039c6:	f7ff fbf3 	bl	80031b0 <_free_r>
 80039ca:	2300      	movs	r3, #0
 80039cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80039ce:	e00d      	b.n	80039ec <__sflush_r+0xac>
 80039d0:	2301      	movs	r3, #1
 80039d2:	4628      	mov	r0, r5
 80039d4:	47b0      	blx	r6
 80039d6:	4602      	mov	r2, r0
 80039d8:	1c50      	adds	r0, r2, #1
 80039da:	d1c9      	bne.n	8003970 <__sflush_r+0x30>
 80039dc:	682b      	ldr	r3, [r5, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d0c6      	beq.n	8003970 <__sflush_r+0x30>
 80039e2:	2b1d      	cmp	r3, #29
 80039e4:	d001      	beq.n	80039ea <__sflush_r+0xaa>
 80039e6:	2b16      	cmp	r3, #22
 80039e8:	d11d      	bne.n	8003a26 <__sflush_r+0xe6>
 80039ea:	602f      	str	r7, [r5, #0]
 80039ec:	2000      	movs	r0, #0
 80039ee:	e021      	b.n	8003a34 <__sflush_r+0xf4>
 80039f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039f4:	b21b      	sxth	r3, r3
 80039f6:	e01a      	b.n	8003a2e <__sflush_r+0xee>
 80039f8:	690f      	ldr	r7, [r1, #16]
 80039fa:	2f00      	cmp	r7, #0
 80039fc:	d0f6      	beq.n	80039ec <__sflush_r+0xac>
 80039fe:	0793      	lsls	r3, r2, #30
 8003a00:	bf18      	it	ne
 8003a02:	2300      	movne	r3, #0
 8003a04:	680e      	ldr	r6, [r1, #0]
 8003a06:	bf08      	it	eq
 8003a08:	694b      	ldreq	r3, [r1, #20]
 8003a0a:	1bf6      	subs	r6, r6, r7
 8003a0c:	600f      	str	r7, [r1, #0]
 8003a0e:	608b      	str	r3, [r1, #8]
 8003a10:	2e00      	cmp	r6, #0
 8003a12:	ddeb      	ble.n	80039ec <__sflush_r+0xac>
 8003a14:	4633      	mov	r3, r6
 8003a16:	463a      	mov	r2, r7
 8003a18:	4628      	mov	r0, r5
 8003a1a:	6a21      	ldr	r1, [r4, #32]
 8003a1c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003a20:	47e0      	blx	ip
 8003a22:	2800      	cmp	r0, #0
 8003a24:	dc07      	bgt.n	8003a36 <__sflush_r+0xf6>
 8003a26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8003a32:	81a3      	strh	r3, [r4, #12]
 8003a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a36:	4407      	add	r7, r0
 8003a38:	1a36      	subs	r6, r6, r0
 8003a3a:	e7e9      	b.n	8003a10 <__sflush_r+0xd0>
 8003a3c:	dfbffffe 	.word	0xdfbffffe

08003a40 <_fflush_r>:
 8003a40:	b538      	push	{r3, r4, r5, lr}
 8003a42:	690b      	ldr	r3, [r1, #16]
 8003a44:	4605      	mov	r5, r0
 8003a46:	460c      	mov	r4, r1
 8003a48:	b913      	cbnz	r3, 8003a50 <_fflush_r+0x10>
 8003a4a:	2500      	movs	r5, #0
 8003a4c:	4628      	mov	r0, r5
 8003a4e:	bd38      	pop	{r3, r4, r5, pc}
 8003a50:	b118      	cbz	r0, 8003a5a <_fflush_r+0x1a>
 8003a52:	6a03      	ldr	r3, [r0, #32]
 8003a54:	b90b      	cbnz	r3, 8003a5a <_fflush_r+0x1a>
 8003a56:	f7ff faa3 	bl	8002fa0 <__sinit>
 8003a5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0f3      	beq.n	8003a4a <_fflush_r+0xa>
 8003a62:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003a64:	07d0      	lsls	r0, r2, #31
 8003a66:	d404      	bmi.n	8003a72 <_fflush_r+0x32>
 8003a68:	0599      	lsls	r1, r3, #22
 8003a6a:	d402      	bmi.n	8003a72 <_fflush_r+0x32>
 8003a6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a6e:	f7ff fb9c 	bl	80031aa <__retarget_lock_acquire_recursive>
 8003a72:	4628      	mov	r0, r5
 8003a74:	4621      	mov	r1, r4
 8003a76:	f7ff ff63 	bl	8003940 <__sflush_r>
 8003a7a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003a7c:	4605      	mov	r5, r0
 8003a7e:	07da      	lsls	r2, r3, #31
 8003a80:	d4e4      	bmi.n	8003a4c <_fflush_r+0xc>
 8003a82:	89a3      	ldrh	r3, [r4, #12]
 8003a84:	059b      	lsls	r3, r3, #22
 8003a86:	d4e1      	bmi.n	8003a4c <_fflush_r+0xc>
 8003a88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a8a:	f7ff fb8f 	bl	80031ac <__retarget_lock_release_recursive>
 8003a8e:	e7dd      	b.n	8003a4c <_fflush_r+0xc>

08003a90 <__swbuf_r>:
 8003a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a92:	460e      	mov	r6, r1
 8003a94:	4614      	mov	r4, r2
 8003a96:	4605      	mov	r5, r0
 8003a98:	b118      	cbz	r0, 8003aa2 <__swbuf_r+0x12>
 8003a9a:	6a03      	ldr	r3, [r0, #32]
 8003a9c:	b90b      	cbnz	r3, 8003aa2 <__swbuf_r+0x12>
 8003a9e:	f7ff fa7f 	bl	8002fa0 <__sinit>
 8003aa2:	69a3      	ldr	r3, [r4, #24]
 8003aa4:	60a3      	str	r3, [r4, #8]
 8003aa6:	89a3      	ldrh	r3, [r4, #12]
 8003aa8:	071a      	lsls	r2, r3, #28
 8003aaa:	d501      	bpl.n	8003ab0 <__swbuf_r+0x20>
 8003aac:	6923      	ldr	r3, [r4, #16]
 8003aae:	b943      	cbnz	r3, 8003ac2 <__swbuf_r+0x32>
 8003ab0:	4621      	mov	r1, r4
 8003ab2:	4628      	mov	r0, r5
 8003ab4:	f000 f82a 	bl	8003b0c <__swsetup_r>
 8003ab8:	b118      	cbz	r0, 8003ac2 <__swbuf_r+0x32>
 8003aba:	f04f 37ff 	mov.w	r7, #4294967295
 8003abe:	4638      	mov	r0, r7
 8003ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ac2:	6823      	ldr	r3, [r4, #0]
 8003ac4:	6922      	ldr	r2, [r4, #16]
 8003ac6:	b2f6      	uxtb	r6, r6
 8003ac8:	1a98      	subs	r0, r3, r2
 8003aca:	6963      	ldr	r3, [r4, #20]
 8003acc:	4637      	mov	r7, r6
 8003ace:	4283      	cmp	r3, r0
 8003ad0:	dc05      	bgt.n	8003ade <__swbuf_r+0x4e>
 8003ad2:	4621      	mov	r1, r4
 8003ad4:	4628      	mov	r0, r5
 8003ad6:	f7ff ffb3 	bl	8003a40 <_fflush_r>
 8003ada:	2800      	cmp	r0, #0
 8003adc:	d1ed      	bne.n	8003aba <__swbuf_r+0x2a>
 8003ade:	68a3      	ldr	r3, [r4, #8]
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	60a3      	str	r3, [r4, #8]
 8003ae4:	6823      	ldr	r3, [r4, #0]
 8003ae6:	1c5a      	adds	r2, r3, #1
 8003ae8:	6022      	str	r2, [r4, #0]
 8003aea:	701e      	strb	r6, [r3, #0]
 8003aec:	6962      	ldr	r2, [r4, #20]
 8003aee:	1c43      	adds	r3, r0, #1
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d004      	beq.n	8003afe <__swbuf_r+0x6e>
 8003af4:	89a3      	ldrh	r3, [r4, #12]
 8003af6:	07db      	lsls	r3, r3, #31
 8003af8:	d5e1      	bpl.n	8003abe <__swbuf_r+0x2e>
 8003afa:	2e0a      	cmp	r6, #10
 8003afc:	d1df      	bne.n	8003abe <__swbuf_r+0x2e>
 8003afe:	4621      	mov	r1, r4
 8003b00:	4628      	mov	r0, r5
 8003b02:	f7ff ff9d 	bl	8003a40 <_fflush_r>
 8003b06:	2800      	cmp	r0, #0
 8003b08:	d0d9      	beq.n	8003abe <__swbuf_r+0x2e>
 8003b0a:	e7d6      	b.n	8003aba <__swbuf_r+0x2a>

08003b0c <__swsetup_r>:
 8003b0c:	b538      	push	{r3, r4, r5, lr}
 8003b0e:	4b29      	ldr	r3, [pc, #164]	@ (8003bb4 <__swsetup_r+0xa8>)
 8003b10:	4605      	mov	r5, r0
 8003b12:	6818      	ldr	r0, [r3, #0]
 8003b14:	460c      	mov	r4, r1
 8003b16:	b118      	cbz	r0, 8003b20 <__swsetup_r+0x14>
 8003b18:	6a03      	ldr	r3, [r0, #32]
 8003b1a:	b90b      	cbnz	r3, 8003b20 <__swsetup_r+0x14>
 8003b1c:	f7ff fa40 	bl	8002fa0 <__sinit>
 8003b20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b24:	0719      	lsls	r1, r3, #28
 8003b26:	d422      	bmi.n	8003b6e <__swsetup_r+0x62>
 8003b28:	06da      	lsls	r2, r3, #27
 8003b2a:	d407      	bmi.n	8003b3c <__swsetup_r+0x30>
 8003b2c:	2209      	movs	r2, #9
 8003b2e:	602a      	str	r2, [r5, #0]
 8003b30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b34:	f04f 30ff 	mov.w	r0, #4294967295
 8003b38:	81a3      	strh	r3, [r4, #12]
 8003b3a:	e033      	b.n	8003ba4 <__swsetup_r+0x98>
 8003b3c:	0758      	lsls	r0, r3, #29
 8003b3e:	d512      	bpl.n	8003b66 <__swsetup_r+0x5a>
 8003b40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003b42:	b141      	cbz	r1, 8003b56 <__swsetup_r+0x4a>
 8003b44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003b48:	4299      	cmp	r1, r3
 8003b4a:	d002      	beq.n	8003b52 <__swsetup_r+0x46>
 8003b4c:	4628      	mov	r0, r5
 8003b4e:	f7ff fb2f 	bl	80031b0 <_free_r>
 8003b52:	2300      	movs	r3, #0
 8003b54:	6363      	str	r3, [r4, #52]	@ 0x34
 8003b56:	89a3      	ldrh	r3, [r4, #12]
 8003b58:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003b5c:	81a3      	strh	r3, [r4, #12]
 8003b5e:	2300      	movs	r3, #0
 8003b60:	6063      	str	r3, [r4, #4]
 8003b62:	6923      	ldr	r3, [r4, #16]
 8003b64:	6023      	str	r3, [r4, #0]
 8003b66:	89a3      	ldrh	r3, [r4, #12]
 8003b68:	f043 0308 	orr.w	r3, r3, #8
 8003b6c:	81a3      	strh	r3, [r4, #12]
 8003b6e:	6923      	ldr	r3, [r4, #16]
 8003b70:	b94b      	cbnz	r3, 8003b86 <__swsetup_r+0x7a>
 8003b72:	89a3      	ldrh	r3, [r4, #12]
 8003b74:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003b78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b7c:	d003      	beq.n	8003b86 <__swsetup_r+0x7a>
 8003b7e:	4621      	mov	r1, r4
 8003b80:	4628      	mov	r0, r5
 8003b82:	f000 f85c 	bl	8003c3e <__smakebuf_r>
 8003b86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b8a:	f013 0201 	ands.w	r2, r3, #1
 8003b8e:	d00a      	beq.n	8003ba6 <__swsetup_r+0x9a>
 8003b90:	2200      	movs	r2, #0
 8003b92:	60a2      	str	r2, [r4, #8]
 8003b94:	6962      	ldr	r2, [r4, #20]
 8003b96:	4252      	negs	r2, r2
 8003b98:	61a2      	str	r2, [r4, #24]
 8003b9a:	6922      	ldr	r2, [r4, #16]
 8003b9c:	b942      	cbnz	r2, 8003bb0 <__swsetup_r+0xa4>
 8003b9e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003ba2:	d1c5      	bne.n	8003b30 <__swsetup_r+0x24>
 8003ba4:	bd38      	pop	{r3, r4, r5, pc}
 8003ba6:	0799      	lsls	r1, r3, #30
 8003ba8:	bf58      	it	pl
 8003baa:	6962      	ldrpl	r2, [r4, #20]
 8003bac:	60a2      	str	r2, [r4, #8]
 8003bae:	e7f4      	b.n	8003b9a <__swsetup_r+0x8e>
 8003bb0:	2000      	movs	r0, #0
 8003bb2:	e7f7      	b.n	8003ba4 <__swsetup_r+0x98>
 8003bb4:	2000001c 	.word	0x2000001c

08003bb8 <_sbrk_r>:
 8003bb8:	b538      	push	{r3, r4, r5, lr}
 8003bba:	2300      	movs	r3, #0
 8003bbc:	4d05      	ldr	r5, [pc, #20]	@ (8003bd4 <_sbrk_r+0x1c>)
 8003bbe:	4604      	mov	r4, r0
 8003bc0:	4608      	mov	r0, r1
 8003bc2:	602b      	str	r3, [r5, #0]
 8003bc4:	f7fc fd9c 	bl	8000700 <_sbrk>
 8003bc8:	1c43      	adds	r3, r0, #1
 8003bca:	d102      	bne.n	8003bd2 <_sbrk_r+0x1a>
 8003bcc:	682b      	ldr	r3, [r5, #0]
 8003bce:	b103      	cbz	r3, 8003bd2 <_sbrk_r+0x1a>
 8003bd0:	6023      	str	r3, [r4, #0]
 8003bd2:	bd38      	pop	{r3, r4, r5, pc}
 8003bd4:	20000270 	.word	0x20000270

08003bd8 <memchr>:
 8003bd8:	4603      	mov	r3, r0
 8003bda:	b510      	push	{r4, lr}
 8003bdc:	b2c9      	uxtb	r1, r1
 8003bde:	4402      	add	r2, r0
 8003be0:	4293      	cmp	r3, r2
 8003be2:	4618      	mov	r0, r3
 8003be4:	d101      	bne.n	8003bea <memchr+0x12>
 8003be6:	2000      	movs	r0, #0
 8003be8:	e003      	b.n	8003bf2 <memchr+0x1a>
 8003bea:	7804      	ldrb	r4, [r0, #0]
 8003bec:	3301      	adds	r3, #1
 8003bee:	428c      	cmp	r4, r1
 8003bf0:	d1f6      	bne.n	8003be0 <memchr+0x8>
 8003bf2:	bd10      	pop	{r4, pc}

08003bf4 <__swhatbuf_r>:
 8003bf4:	b570      	push	{r4, r5, r6, lr}
 8003bf6:	460c      	mov	r4, r1
 8003bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bfc:	4615      	mov	r5, r2
 8003bfe:	2900      	cmp	r1, #0
 8003c00:	461e      	mov	r6, r3
 8003c02:	b096      	sub	sp, #88	@ 0x58
 8003c04:	da0c      	bge.n	8003c20 <__swhatbuf_r+0x2c>
 8003c06:	89a3      	ldrh	r3, [r4, #12]
 8003c08:	2100      	movs	r1, #0
 8003c0a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003c0e:	bf14      	ite	ne
 8003c10:	2340      	movne	r3, #64	@ 0x40
 8003c12:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003c16:	2000      	movs	r0, #0
 8003c18:	6031      	str	r1, [r6, #0]
 8003c1a:	602b      	str	r3, [r5, #0]
 8003c1c:	b016      	add	sp, #88	@ 0x58
 8003c1e:	bd70      	pop	{r4, r5, r6, pc}
 8003c20:	466a      	mov	r2, sp
 8003c22:	f000 f849 	bl	8003cb8 <_fstat_r>
 8003c26:	2800      	cmp	r0, #0
 8003c28:	dbed      	blt.n	8003c06 <__swhatbuf_r+0x12>
 8003c2a:	9901      	ldr	r1, [sp, #4]
 8003c2c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003c30:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003c34:	4259      	negs	r1, r3
 8003c36:	4159      	adcs	r1, r3
 8003c38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c3c:	e7eb      	b.n	8003c16 <__swhatbuf_r+0x22>

08003c3e <__smakebuf_r>:
 8003c3e:	898b      	ldrh	r3, [r1, #12]
 8003c40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c42:	079d      	lsls	r5, r3, #30
 8003c44:	4606      	mov	r6, r0
 8003c46:	460c      	mov	r4, r1
 8003c48:	d507      	bpl.n	8003c5a <__smakebuf_r+0x1c>
 8003c4a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003c4e:	6023      	str	r3, [r4, #0]
 8003c50:	6123      	str	r3, [r4, #16]
 8003c52:	2301      	movs	r3, #1
 8003c54:	6163      	str	r3, [r4, #20]
 8003c56:	b003      	add	sp, #12
 8003c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c5a:	466a      	mov	r2, sp
 8003c5c:	ab01      	add	r3, sp, #4
 8003c5e:	f7ff ffc9 	bl	8003bf4 <__swhatbuf_r>
 8003c62:	9f00      	ldr	r7, [sp, #0]
 8003c64:	4605      	mov	r5, r0
 8003c66:	4639      	mov	r1, r7
 8003c68:	4630      	mov	r0, r6
 8003c6a:	f7ff fb0b 	bl	8003284 <_malloc_r>
 8003c6e:	b948      	cbnz	r0, 8003c84 <__smakebuf_r+0x46>
 8003c70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c74:	059a      	lsls	r2, r3, #22
 8003c76:	d4ee      	bmi.n	8003c56 <__smakebuf_r+0x18>
 8003c78:	f023 0303 	bic.w	r3, r3, #3
 8003c7c:	f043 0302 	orr.w	r3, r3, #2
 8003c80:	81a3      	strh	r3, [r4, #12]
 8003c82:	e7e2      	b.n	8003c4a <__smakebuf_r+0xc>
 8003c84:	89a3      	ldrh	r3, [r4, #12]
 8003c86:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003c8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c8e:	81a3      	strh	r3, [r4, #12]
 8003c90:	9b01      	ldr	r3, [sp, #4]
 8003c92:	6020      	str	r0, [r4, #0]
 8003c94:	b15b      	cbz	r3, 8003cae <__smakebuf_r+0x70>
 8003c96:	4630      	mov	r0, r6
 8003c98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c9c:	f000 f81e 	bl	8003cdc <_isatty_r>
 8003ca0:	b128      	cbz	r0, 8003cae <__smakebuf_r+0x70>
 8003ca2:	89a3      	ldrh	r3, [r4, #12]
 8003ca4:	f023 0303 	bic.w	r3, r3, #3
 8003ca8:	f043 0301 	orr.w	r3, r3, #1
 8003cac:	81a3      	strh	r3, [r4, #12]
 8003cae:	89a3      	ldrh	r3, [r4, #12]
 8003cb0:	431d      	orrs	r5, r3
 8003cb2:	81a5      	strh	r5, [r4, #12]
 8003cb4:	e7cf      	b.n	8003c56 <__smakebuf_r+0x18>
	...

08003cb8 <_fstat_r>:
 8003cb8:	b538      	push	{r3, r4, r5, lr}
 8003cba:	2300      	movs	r3, #0
 8003cbc:	4d06      	ldr	r5, [pc, #24]	@ (8003cd8 <_fstat_r+0x20>)
 8003cbe:	4604      	mov	r4, r0
 8003cc0:	4608      	mov	r0, r1
 8003cc2:	4611      	mov	r1, r2
 8003cc4:	602b      	str	r3, [r5, #0]
 8003cc6:	f7fc fcf5 	bl	80006b4 <_fstat>
 8003cca:	1c43      	adds	r3, r0, #1
 8003ccc:	d102      	bne.n	8003cd4 <_fstat_r+0x1c>
 8003cce:	682b      	ldr	r3, [r5, #0]
 8003cd0:	b103      	cbz	r3, 8003cd4 <_fstat_r+0x1c>
 8003cd2:	6023      	str	r3, [r4, #0]
 8003cd4:	bd38      	pop	{r3, r4, r5, pc}
 8003cd6:	bf00      	nop
 8003cd8:	20000270 	.word	0x20000270

08003cdc <_isatty_r>:
 8003cdc:	b538      	push	{r3, r4, r5, lr}
 8003cde:	2300      	movs	r3, #0
 8003ce0:	4d05      	ldr	r5, [pc, #20]	@ (8003cf8 <_isatty_r+0x1c>)
 8003ce2:	4604      	mov	r4, r0
 8003ce4:	4608      	mov	r0, r1
 8003ce6:	602b      	str	r3, [r5, #0]
 8003ce8:	f7fc fcf3 	bl	80006d2 <_isatty>
 8003cec:	1c43      	adds	r3, r0, #1
 8003cee:	d102      	bne.n	8003cf6 <_isatty_r+0x1a>
 8003cf0:	682b      	ldr	r3, [r5, #0]
 8003cf2:	b103      	cbz	r3, 8003cf6 <_isatty_r+0x1a>
 8003cf4:	6023      	str	r3, [r4, #0]
 8003cf6:	bd38      	pop	{r3, r4, r5, pc}
 8003cf8:	20000270 	.word	0x20000270

08003cfc <_init>:
 8003cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cfe:	bf00      	nop
 8003d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d02:	bc08      	pop	{r3}
 8003d04:	469e      	mov	lr, r3
 8003d06:	4770      	bx	lr

08003d08 <_fini>:
 8003d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d0a:	bf00      	nop
 8003d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d0e:	bc08      	pop	{r3}
 8003d10:	469e      	mov	lr, r3
 8003d12:	4770      	bx	lr
